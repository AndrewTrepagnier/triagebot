[2m2022-03-22T23:59:29.857430Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+is:issue+label:major-change+-label:charter-needed+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:29.857776Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+is:issue+label:major-change+-label:charter-needed+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:29.858159Z[0m [34mDEBUG[0m [2mreqwest::connect[0m[2m:[0m starting new connection: https://api.github.com/    
[2m2022-03-22T23:59:29.858456Z[0m [34mDEBUG[0m [2mhyper::client::connect::dns[0m[2m:[0m resolving host="api.github.com"
[2m2022-03-22T23:59:29.861077Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connecting to 140.82.112.6:443
[2m2022-03-22T23:59:29.935790Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connected to 140.82.112.6:443
[2m2022-03-22T23:59:30.236386Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 293 bytes
[2m2022-03-22T23:59:30.511454Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:30.511648Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (81089 bytes)
[2m2022-03-22T23:59:30.511939Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+is:issue+label:major-change+-label:charter-needed+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:30.651857Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:30.652072Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:30.654370Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/lang-team/pulls?state=open&is=pull-request&labels=&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:30.654564Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/lang-team/pulls", query: Some("state=open&is=pull-request&labels=&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:30.654752Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:30.654959Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 266 bytes
[2m2022-03-22T23:59:30.835977Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:30.836057Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:30.836124Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:30.836296Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:30.836357Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/lang-team/pulls?state=open&is=pull-request&labels=&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:30.836503Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/lang-team/issues?state=open&is=issue&labels=meeting-proposal,meeting-scheduled&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:30.836678Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/lang-team/issues", query: Some("state=open&is=issue&labels=meeting-proposal,meeting-scheduled&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:30.836866Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:30.837035Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 294 bytes
[2m2022-03-22T23:59:31.035927Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:31.036039Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (21308 bytes)
[2m2022-03-22T23:59:31.036228Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/lang-team/issues?state=open&is=issue&labels=meeting-proposal,meeting-scheduled&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:31.038133Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:31.038295Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.039182Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rfcs/issues?state=open&is=pr&labels=disposition-merge,finished-final-comment-period,T-lang&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:31.039348Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rfcs/issues", query: Some("state=open&is=pr&labels=disposition-merge,finished-final-comment-period,T-lang&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:31.039512Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.039659Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 306 bytes
[2m2022-03-22T23:59:31.285804Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:31.285877Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:31.285930Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:31.286062Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.286112Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rfcs/issues?state=open&is=pr&labels=disposition-merge,finished-final-comment-period,T-lang&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:31.286239Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rfcs/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:31.286392Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rfcs/issues", query: Some("state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:31.286644Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.286768Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 263 bytes
[2m2022-03-22T23:59:31.438369Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:31.438445Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:31.438495Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:31.438626Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.438673Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rfcs/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:31.438787Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rfcs/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:31.438902Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rfcs/issues", query: Some("state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:31.439020Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.439142Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 262 bytes
[2m2022-03-22T23:59:31.586111Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:31.586260Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (4095 bytes)
[2m2022-03-22T23:59:31.586475Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rfcs/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:31.586659Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:31.586852Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.587312Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rfcs&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:31.587477Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rfcs&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:31.587736Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.587977Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 324 bytes
[2m2022-03-22T23:59:31.835854Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:31.835993Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (7995 bytes)
[2m2022-03-22T23:59:31.836232Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rfcs&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:31.836675Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:31.836841Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.837237Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rfcs&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:31.837356Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rfcs&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:31.837477Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:31.837582Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 315 bytes
[2m2022-03-22T23:59:32.046701Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:32.046757Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (3603 bytes)
[2m2022-03-22T23:59:32.046883Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rfcs&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:32.047398Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:32.047502Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:32.047771Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rfcs/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:32.047891Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rfcs/issues", query: Some("state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:32.048012Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:32.048131Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 282 bytes
[2m2022-03-22T23:59:32.186036Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:32.186153Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:32.186231Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:32.186466Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:32.186568Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rfcs/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:32.186795Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rust/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:32.186987Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rust/issues", query: Some("state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:32.187210Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:32.187477Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 263 bytes
[2m2022-03-22T23:59:33.035813Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:33.035877Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:33.035931Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:33.036080Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.036176Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rust/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:33.036299Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rust/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:33.036424Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rust/issues", query: Some("state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:33.036557Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.036681Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 262 bytes
[2m2022-03-22T23:59:33.235842Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:33.235906Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (28872 bytes)
[2m2022-03-22T23:59:33.236050Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rust/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:33.237705Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:33.237816Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.238516Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rust&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:33.238703Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rust&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:33.238838Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.238957Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 324 bytes
[2m2022-03-22T23:59:33.535757Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:33.535852Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (38663 bytes)
[2m2022-03-22T23:59:33.535990Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rust&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:33.594002Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:33.594187Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.595047Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rust&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:33.595194Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rust&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:33.595342Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.595485Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 315 bytes
[2m2022-03-22T23:59:33.859718Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:33.859818Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (16746 bytes)
[2m2022-03-22T23:59:33.860004Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/rust&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:33.861624Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:33.861758Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.862394Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/rust/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:33.862561Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/rust/issues", query: Some("state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:33.862705Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:33.862835Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 282 bytes
[2m2022-03-22T23:59:34.616396Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:34.616501Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (90797 bytes)
[2m2022-03-22T23:59:34.616639Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/rust/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:34.688719Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:34.688906Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:34.690827Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/reference/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:34.690964Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/reference/issues", query: Some("state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:34.691121Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:34.691241Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 268 bytes
[2m2022-03-22T23:59:34.818262Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:34.818345Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:34.818401Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:34.818534Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:34.818585Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/reference/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:34.818706Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/reference/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:34.818833Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/reference/issues", query: Some("state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:34.818980Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:34.819110Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 267 bytes
[2m2022-03-22T23:59:34.991085Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:34.991144Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (5699 bytes)
[2m2022-03-22T23:59:34.991270Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/reference/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:34.991481Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:34.991579Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:34.991892Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/reference&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:34.992016Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/reference&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:34.992139Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:34.992245Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 329 bytes
[2m2022-03-22T23:59:35.162279Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:35.162347Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (55 bytes)
[2m2022-03-22T23:59:35.162486Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/reference&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:35.162597Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:35.162702Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.162898Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/reference&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:35.163037Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/reference&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:35.163191Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.163323Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 320 bytes
[2m2022-03-22T23:59:35.385719Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:35.385771Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (55 bytes)
[2m2022-03-22T23:59:35.385896Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/reference&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:35.385997Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:35.386093Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.386232Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/reference/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:35.386352Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/reference/issues", query: Some("state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:35.386473Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.386581Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 287 bytes
[2m2022-03-22T23:59:35.499908Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:35.499974Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:35.500035Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:35.500206Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.500254Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/reference/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:35.500369Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/lang-team/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:35.500487Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/lang-team/issues", query: Some("state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:35.500605Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.500712Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 268 bytes
[2m2022-03-22T23:59:35.636113Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:35.636185Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:35.636265Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:35.636403Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.636456Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/lang-team/issues?state=open&labels=T-lang,P-critical&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:35.636573Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/lang-team/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:35.636693Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/lang-team/issues", query: Some("state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:35.636814Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.636925Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 267 bytes
[2m2022-03-22T23:59:35.761125Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:35.761223Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:35.761286Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:35.761434Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.761491Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/lang-team/issues?state=open&labels=I-lang-nominated&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:35.761619Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:35.761760Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:35.761909Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.762042Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 329 bytes
[2m2022-03-22T23:59:35.935699Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:35.935765Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (55 bytes)
[2m2022-03-22T23:59:35.935903Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:proposed-final-comment-period+-label:finished-final-comment-period+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:35.936044Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:35.936149Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.936291Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1"
[2m2022-03-22T23:59:35.936422Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/search/issues", query: Some("q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:35.936555Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:35.936672Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 320 bytes
[2m2022-03-22T23:59:36.167068Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 25 headers
[2m2022-03-22T23:59:36.167155Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (60814 bytes)
[2m2022-03-22T23:59:36.167341Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/search/issues?q=state:open+label:T-lang+label:final-comment-period+-label:finished-final-comment-period+repo:rust-lang/lang-team&sort=created&order=asc&per_page=100&page=1    
[2m2022-03-22T23:59:36.286177Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:36.286306Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:36.287510Z[0m [35mTRACE[0m [2mtriagebot::github[0m[2m:[0m get "https://api.github.com/repos/rust-lang/lang-team/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"
[2m2022-03-22T23:59:36.287641Z[0m [34mDEBUG[0m [2mtriagebot::github[0m[2m:[0m _send_req with RequestBuilder { method: GET, url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("api.github.com")), port: None, path: "/repos/rust-lang/lang-team/issues", query: Some("state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100"), fragment: None }, headers: {"user-agent": "rust-lang-triagebot", "authorization": "token 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"} }
[2m2022-03-22T23:59:36.287775Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m reuse idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:36.287895Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 287 bytes
[2m2022-03-22T23:59:36.397536Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 26 headers
[2m2022-03-22T23:59:36.397626Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (2 bytes)
[2m2022-03-22T23:59:36.397700Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
[2m2022-03-22T23:59:36.397891Z[0m [34mDEBUG[0m [2mhyper::client::pool[0m[2m:[0m pooling idle connection for ("https", api.github.com)
[2m2022-03-22T23:59:36.397956Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://api.github.com/repos/rust-lang/lang-team/issues?state=open&labels=T-lang,finished-final-comment-period&filter=all&sort=created&direction=asc&per_page=100    
[2m2022-03-22T23:59:36.398738Z[0m [34mDEBUG[0m [2mreqwest::connect[0m[2m:[0m starting new connection: https://rfcbot.rs/    
[2m2022-03-22T23:59:36.398876Z[0m [34mDEBUG[0m [2mhyper::client::connect::dns[0m[2m:[0m resolving host="rfcbot.rs"
[2m2022-03-22T23:59:36.400065Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connecting to 172.67.198.110:443
[2m2022-03-22T23:59:36.455138Z[0m [34mDEBUG[0m [2mhyper::client::connect::http[0m[2m:[0m connected to 172.67.198.110:443
[2m2022-03-22T23:59:36.645544Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m flushed 55 bytes
[2m2022-03-22T23:59:36.935632Z[0m [34mDEBUG[0m [2mhyper::proto::h1::io[0m[2m:[0m parsed 12 headers
[2m2022-03-22T23:59:36.935704Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body is content-length (133526 bytes)
[2m2022-03-22T23:59:36.935853Z[0m [34mDEBUG[0m [2mreqwest::async_impl::client[0m[2m:[0m response '200 OK' for https://rfcbot.rs/api/all    
[2m2022-03-22T23:59:36.939516Z[0m [34mDEBUG[0m [2mhyper::proto::h1::conn[0m[2m:[0m incoming body completed
res: [
    FullFCP {
        fcp: FCP {
            id: 1959,
            fk_issue: 1382166,
            fk_initiator: 77424,
            fk_initiating_comment: 896587182,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 896587191,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 77424,
                    login: "eddyb",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 332036,
                    login: "oli-obk",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 679122,
                    login: "nagisa",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 831192,
                    login: "wesleywiser",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1295100,
                    login: "davidtwco",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1408859,
                    login: "Aaron1011",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1606434,
                    login: "estebank",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1825894,
                    login: "michaelwoerister",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5751617,
                    login: "petrochenkov",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 20113453,
                    login: "matthewjasper",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 29864074,
                    login: "lcnr",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1382166,
            number: 3161,
            fk_milestone: None,
            fk_user: 77424,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "[RFC2603] Extend `<const>` to include `str` and structural constants.",
            body: "I'm not sure what the process for amending RFCs is, but here goes nothing:\r\n\r\nThis is one of the last pieces of the `v0` mangling, namely arbitrary constant values (for the full `const` generics feature). This has been tracked by https://github.com/rust-lang/rust/issues/61486, and there's some discussion there.\r\n\r\nThe main takeaway is that the mangling is *structural* (ADT-like tree with integer-like leaves), matching the structural equality that type-level constants are *required* to follow, for soundness reasons.\r\n\r\nAccompanying implementation PRs:\r\n* mangling: https://github.com/rust-lang/rust/pull/87194\r\n* demangling: https://github.com/alexcrichton/rustc-demangle/pull/55\r\n\r\nThe summary of the added forms is:\r\n* `e`: `str`, followed by bytes encoded as two hex nibbles per byte\r\n* `R`/`Q`: `&`/`&mut`, followed by the pointee value\r\n* `A...E`: `[...]`, containing any number of element values\r\n* `T...E`: `(...)`, containing any number of field values\r\n* `V`: named variant/`struct`, followed by the constructor path and one of:\r\n  * `U`: unit variant/`struct` (e.g. `None`)\r\n  * `T...E`: tuple variant/`struct` (e.g. `Some(...)`), containing any number of field values\r\n  * `S...E`: struct-like variant/`struct` (e.g. `Foo { ... }`), containing any number of (disambiguated-)identifier-prefixed (i.e. named) field values\r\n\r\n<hr/>\r\n\r\nEven if there may be constants in the future not covered by these forms, we can rely on the nominal `V` form to encode all sorts of pseudo-paths (while waiting for demanglers to support dedicated manglings), such as these *hypothetical* examples:\r\n* `const::<SomeType>::h54723863eb99e89f` (hashed constant, masquerading as unit `struct`)\r\n* `core::mem::transmute::<usize, *mut T>(1)` (function call, masquerading as tuple `struct`)\r\n\r\n<hr/>\r\n\r\ncc @michaelwoerister",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-08-10T18:33:26",
            ),
            updated_at: Some(
                "2022-03-02T08:37:11",
            ),
            labels: [
                "T-compiler",
                "proposed-final-comment-period",
                "disposition-merge",
            ],
            repository: "rust-lang/rfcs",
        },
        status_comment: StatusComment {
            id: 896587191,
            fk_issue: 1382166,
            fk_user: 20760818,
            body: "Team member @eddyb has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Aaron1011\n* [x] @davidtwco\n* [x] @eddyb\n* [x] @estebank\n* [x] @lcnr\n* [x] @matthewjasper\n* [x] @michaelwoerister\n* [x] @nagisa\n* [x] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [ ] @pnkfelix\n* [x] @wesleywiser\n\nConcerns:\n\n* field names are unnecessary (https://github.com/rust-lang/rfcs/pull/3161#issuecomment-896965971)\n* unit structs are unnecessary (https://github.com/rust-lang/rfcs/pull/3161#issuecomment-896965971)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-08-11T07:56:26",
            updated_at: Some(
                "2021-09-17T13:49:08",
            ),
            repository: "rust-lang/rfcs",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2030,
            fk_issue: 1422097,
            fk_initiator: 783247,
            fk_initiating_comment: 927177702,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 927177703,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1422097,
            number: 89238,
            fk_milestone: None,
            fk_user: 46493976,
            fk_assignee: Some(
                783247,
            ),
            open: true,
            is_pull_request: true,
            title: "deprecate f{32,64}::DIGITS",
            body: "These constants are misleading: the number of significant digits\r\nvaries for each value that these floating point numbers may encode\r\nbut some programmers are taking them directly as an upper bound.\r\nThis is wrong and is leading to programmers creating applications\r\nthat directly mislead other users about their meaning, having\r\na negative ecosystem-wide impact on mathematical accuracy.\r\n\r\nTo contain the damage, deprecate them without replacement.\r\nIt is hoped this will force programmers to reevaluate their use.\r\n\r\nCloses https://github.com/rust-lang/rust/issues/89106.\r\nThis problem may seem trivial but instructions to alter valid float values being generated by an otherwise highly-regarded source (Clippy) is a bad result. While a PR is open against rust-clippy to fix this behavior, this pattern may have arisen in non-indexed code, even though it seems to be uncommon. As the constants don't seem to be greatly used in practice, while the damage they can do if misused is high, it seems reasonable to take this path.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-09-25T00:09:00",
            ),
            updated_at: Some(
                "2022-02-04T20:05:39",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-author",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "A-floating-point",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 927177703,
            fk_issue: 1422097,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* detailed explanation (https://github.com/rust-lang/rust/pull/89238#issuecomment-929701400)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-09-25T20:17:22",
            updated_at: Some(
                "2022-01-19T20:35:25",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2046,
            fk_issue: 1417900,
            fk_initiator: 64996,
            fk_initiating_comment: 934891723,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 934891739,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 64996,
                    login: "alexcrichton",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1417900,
            number: 9925,
            fk_milestone: None,
            fk_user: 44697459,
            fk_assignee: Some(
                3709504,
            ),
            open: true,
            is_pull_request: true,
            title: "Adds backoff mechanism for retry",
            body: "Addresses #9882 \r\n\r\nAdds an exponential backoff mechanism for network retries.\r\n\r\nAdds 2 additional `net` configuration:\r\n- `retry-max-time`: Upper bound for exponential backoff time\r\n- `retry-delay`: If present, override exponential backoff time with constant delay time (in second)\r\n\r\n---\r\n\r\nWould like to have some opinion on the PR first, before continuing.\r\nAlso, I'm not sure how to do time/duration-based testing in Rust, so I'm not sure how to devise a test for this.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-09-20T10:46:25",
            ),
            updated_at: Some(
                "2022-02-24T21:25:06",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-author",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 934891739,
            fk_issue: 1417900,
            fk_user: 20760818,
            body: "Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Eh2406\n* [x] @alexcrichton\n* [ ] @ehuss\n* [ ] @joshtriplett\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-10-05T21:45:57",
            updated_at: Some(
                "2021-10-05T22:12:37",
            ),
            repository: "rust-lang/cargo",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2082,
            fk_issue: 1450565,
            fk_initiator: 162737,
            fk_initiating_comment: 955599587,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 955599591,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1450565,
            number: 90291,
            fk_milestone: None,
            fk_user: 2838446,
            fk_assignee: Some(
                103023,
            ),
            open: true,
            is_pull_request: true,
            title: "Loosen the bound on the Debug implementation of Weak.",
            body: "Both `rc::Weak<T>` and `sync::Weak<T>` currently require `T: Debug` in their own `Debug` implementations, but they don't currently use it;  they only ever print a fixed string.\r\n\r\nA general implementation of Debug for Weak that actually attempts to upgrade and rely on the contents is unlikely in the future because it may have unbounded recursion in the presence of reference cycles, which Weak is commonly used in.  (This was the justification for why the current implementation [was implemented the way it is](https://github.com/rust-lang/rust/pull/19388/commits/f0976e2cf3f6b0027f118b791e0888b29fbb41a7)).\r\n\r\nWhen I brought it up [on the forum](https://internals.rust-lang.org/t/could-the-bound-on-weak-debug-be-relaxed/15504), it was suggested that, even if an implementation is specialized in the future that relies on the data stored within the Weak, it would likely rely on specialization anyway, and could therefore easily specialize on the Debug bound as well.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-10-26T01:51:05",
            ),
            updated_at: Some(
                "2022-03-16T14:34:33",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 955599591,
            fk_issue: 1450565,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* better-use-case (https://github.com/rust-lang/rust/pull/90291#issuecomment-956196380)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-10-30T22:04:41",
            updated_at: Some(
                "2022-03-09T17:38:17",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2119,
            fk_issue: 1491608,
            fk_initiator: 37223377,
            fk_initiating_comment: 996996449,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 996996461,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 81079,
                    login: "Nemo157",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 220205,
                    login: "jsha",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1617736,
                    login: "Manishearth",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 3050060,
                    login: "GuillaumeGomez",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 7189418,
                    login: "ollie27",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 13342132,
                    login: "CraftSpider",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 23638587,
                    login: "jyn514",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 37223377,
                    login: "camelid",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1491608,
            number: 91759,
            fk_milestone: None,
            fk_user: 37223377,
            fk_assignee: Some(
                3050060,
            ),
            open: true,
            is_pull_request: false,
            title: "rustdoc: \"Namespace\" user-written Markdown headings",
            body: "Tracking issue for @jsha's idea mentioned [here](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264504935). What follows is @jsha's summary of the idea:\r\n\r\nWhen markdown like `# Examples` is processed, it usually turns into something like `<a href=\"#examples\" id=\"examples\">`. This is useful so you can click on the heading and get a link that will take someone else to that precise part of the docs.\r\n\r\nSince the markdown in rustdoc is user-generated, those anchor ids may conflict with Rustdoc's own anchor ids. They may also conflict with other markdown sections within the same doc page. For instance, see:\r\n\r\nhttps://doc.rust-lang.org/nightly/std/string/struct.String.html#examples\r\nhttps://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-1\r\nhttps://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-2\r\n\r\nRight now we disambiguate these ids by added a number at the end. However, it would be better to disambiguate them by namespacing. Specifically, each time we render markdown we should provide a \"prefix\", and all IDs in the generated HTML should start with that prefix. In general a convenient and sensible choice for this prefix would be the id of the immediately preceding heading. So the examples linked above might become `#top.examples`, `#method.new.examples`, and `#method.from_utf8.examples`.\r\n\r\nThis has three advantages:\r\n - It systematically removes most of the cases of id conflict.\r\n - It makes anchor links more meaningful when someone reads the URL.\r\n - It makes anchor links stable across revisions.\r\n\r\nThis is a 99% solution, not a 100% one. Users can author HTML directly in their markdown, for instance `<div id=\"foo\">`. But we are okay with letting the conflicts happen in those rare cases.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-12-10T21:28:12",
            ),
            updated_at: Some(
                "2022-01-23T03:43:18",
            ),
            labels: [
                "T-rustdoc",
                "C-enhancement",
                "proposed-final-comment-period",
                "disposition-merge",
                "A-rustdoc-ui",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 996996461,
            fk_issue: 1491608,
            fk_user: 20760818,
            body: "Team member @camelid has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @CraftSpider\n* [x] @GuillaumeGomez\n* [x] @Manishearth\n* [x] @Nemo157\n* [x] @camelid\n* [x] @jsha\n* [ ] @jyn514\n* [ ] @ollie27\n\nConcerns:\n\n* ~~anchor formatting~~ resolved by https://github.com/rust-lang/rust/issues/91759#issuecomment-1012496534\n* ~~breakage~~ resolved by https://github.com/rust-lang/rust/issues/91759#issuecomment-1012548149\n* ~~impls~~ resolved by https://github.com/rust-lang/rust/issues/91759#issuecomment-997085268\n* simplify (https://github.com/rust-lang/rust/issues/91759#issuecomment-1019004268)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-12-17T19:56:24",
            updated_at: Some(
                "2022-01-22T01:19:10",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2160,
            fk_issue: 1492330,
            fk_initiator: 1993852,
            fk_initiating_comment: 1026130074,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1026130086,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1492330,
            number: 91789,
            fk_milestone: None,
            fk_user: 9161438,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for try_reserve method on more containers",
            body: "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! 📜 Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is another tracking issue for the try_reserve part of the RFC \"fallible collection allocation\" (rust-lang/rfcs#2116).\r\nThe feature gate for the issue is `#![feature(try_reserve_2)]`.\r\n\r\nThe feature is a follow-up to #48043. Since `try_reserve` was stabilized in 1.57.0, we may need a new feature gate for further `try_reserve` implementation on more containers.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement `try_reserve` and `try_reserve_exact` on `BinaryHeap` #91529 \r\n- [x] Implement `try_reserve` and `try_reserve_exact` on `PathBuf` #92513\r\n- [x] Implement `try_reserve` and `try_reserve_exact` on `OsString` #92338 \r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\nIf any containers were missing, please comment in the issue, and I will add it to the list.\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n#91529 \r\n#92338 \r\n#92513\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-12-11T14:40:29",
            ),
            updated_at: Some(
                "2022-03-13T17:47:25",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1026130086,
            fk_issue: 1492330,
            fk_user: 20760818,
            body: "Team member @yaahc has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* do we need better docs about what the argument value means (not bytes) (https://github.com/rust-lang/rust/issues/91789#issuecomment-1027257918)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-01-31T19:28:08",
            updated_at: Some(
                "2022-02-16T21:01:10",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2172,
            fk_issue: 1539703,
            fk_initiator: 64996,
            fk_initiating_comment: 1035052340,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1035052370,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 64996,
                    login: "alexcrichton",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1539703,
            number: 10344,
            fk_milestone: None,
            fk_user: 14314532,
            fk_assignee: Some(
                64996,
            ),
            open: true,
            is_pull_request: true,
            title: "Auto-switch to multi-sources vendor directory layout",
            body: "<!-- homu-ignore:start -->\r\n### What does this PR try to resolve?\r\n\r\n`cargo-vendor` has been broken for a while, there is no a clear alternative way to solve the situation described in #10310. This PR tries to do what `--no-merge-sources` does but automatically switching to multi-sources layout instead of introducing the flag. (see https://github.com/rust-lang/cargo/pull/10344#pullrequestreview-868113795 and https://github.com/rust-lang/cargo/pull/10344#issuecomment-1032994506)\r\n\r\nFixes #10310\r\n\r\n### How should we test and review this PR?\r\n\r\nPart of the logic is copied from https://github.com/alexcrichton/cargo-vendor.\r\n\r\nSeveral tests are updated and added:\r\n\r\n- 🆕 `vendor::duplicate_version_from_multiple_sources`: Auto-switch between non-merged and merged sources.\r\n- ❌ `vendor::git_duplicate`: Removed. cargo-vendor now can auto-switch.\r\n- ❌ `vendor::vendor_sample_config`: Merged into `vendor::vendor_simple`.\r\n\r\n### Additional information\r\n\r\nThere are somethings I am uncertain:\r\n\r\n- [x] When switching between non-merged and merged sources. `cargo-vendor` removes the entire vendor directory. Should cargo emit a warning or just error out and tell user the incompatibility between merged and non-merged? Generally removing the vendor dir should not be a destructive operation but thing not always goes as we thought 😆 \r\n**Solved**: See https://github.com/rust-lang/cargo/pull/10344#discussion_r795852617\r\n- [x] The `cargo::util::short_hash` is not compatible with [the one in cargo-vendor]. I personally prefer to use `util::short_hash` instead, but if the compatibility is more important I am also ok to copy it over.\r\n**Solved**: See https://github.com/rust-lang/cargo/pull/10344#discussion_r796996824\r\n\r\n[the one in cargo-vendor]: https://github.com/alexcrichton/cargo-vendor/blob/07570e23/src/main.rs#L568-L575\r\n\r\n<!-- homu-ignore:end -->\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-31T04:31:17",
            ),
            updated_at: Some(
                "2022-03-10T15:45:37",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-author",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 1035052370,
            fk_issue: 1539703,
            fk_user: 20760818,
            body: "Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Eh2406\n* [x] @alexcrichton\n* [x] @ehuss\n* [ ] @joshtriplett\n\nConcerns:\n\n* directory-source (https://github.com/rust-lang/cargo/pull/10344#issuecomment-1035305157)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-10T15:26:37",
            updated_at: Some(
                "2022-02-25T18:39:32",
            ),
            repository: "rust-lang/cargo",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2165,
            fk_issue: 1543435,
            fk_initiator: 162737,
            fk_initiating_comment: 1029383577,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1029383585,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1543435,
            number: 93628,
            fk_milestone: None,
            fk_user: 8872119,
            fk_assignee: Some(
                31162821,
            ),
            open: true,
            is_pull_request: true,
            title: "Stabilize `let else`",
            body: ":tada:  **Stabilizes the `let else` feature, added by [RFC 3137](https://github.com/rust-lang/rfcs/pull/3137).** :tada: \r\n\r\nReference PR: https://github.com/rust-lang/reference/pull/1156\r\n\r\nFiling a draft as it is still subject to FCP approval.\r\n\r\ncloses #87335 (`let else` tracking issue)\r\n\r\nFCP: https://github.com/rust-lang/rust/pull/93628#issuecomment-1029383585\r\n\r\n----------\r\n\r\n## Stabilization report\r\n\r\n### Summary\r\n\r\nThe feature allows refutable patterns in `let` statements if the expression is\r\nfollowed by a diverging `else`:\r\n\r\n```Rust\r\nfn get_count_item(s: &str) -> (u64, &str) {\r\n    let mut it = s.split(' ');\r\n    let (Some(count_str), Some(item)) = (it.next(), it.next()) else {\r\n        panic!(\"Can't segment count item pair: '{s}'\");\r\n    };\r\n    let Ok(count) = u64::from_str(count_str) else {\r\n        panic!(\"Can't parse integer: '{count_str}'\");\r\n    };\r\n    (count, item)\r\n}\r\nassert_eq!(get_count_item(\"3 chairs\"), (3, \"chairs\"));\r\n```\r\n\r\n### Differences from the RFC / Desugaring\r\n\r\nOutside of desugaring I'm not aware of any differences between the implementation and the RFC. The chosen desugaring has been changed from the RFC's [original](https://rust-lang.github.io/rfcs/3137-let-else.html#reference-level-explanations). You can read a detailed discussion of the implementation history of it in @cormacrelf 's [summary](https://github.com/rust-lang/rust/pull/93628#issuecomment-1041143670) in this thread, as well as the [followup](https://github.com/rust-lang/rust/pull/93628#issuecomment-1046598419).\r\n\r\n### Test cases\r\n\r\nAdded by df9a2e0687895731e12f4a2651e8d70acd08872d:\r\n\r\n* [`ui/pattern/usefulness/top-level-alternation.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/pattern/usefulness/top-level-alternation.rs) to ensure the unreachable pattern lint visits patterns inside `let else`.\r\n\r\nAdded by 5b95df4bdc330f34213812ad65cae86ced90d80c:\r\n\r\n* [`ui/let-else/let-else-bool-binop-init.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-bool-binop-init.rs) to ensure that no lazy boolean expressions (using `&&` or `||`) are allowed in the expression, as the RFC mandates.\r\n* [`ui/let-else/let-else-brace-before-else.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-brace-before-else.rs) to ensure that no `}` directly preceding the `else` is allowed in the expression, as the RFC mandates.\r\n* [`ui/let-else/let-else-check.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-check.rs) to ensure that `#[allow(...)]` attributes added to the entire `let` statement apply for the `else` block.\r\n* [`ui/let-else/let-else-irrefutable.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-irrefutable.rs) to ensure that the `irrefutable_let_patterns` lint fires.\r\n* [`ui/let-else/let-else-missing-semicolon.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-missing-semicolon.rs) to ensure the presence of semicolons at the end of the `let` statement.\r\n* [`ui/let-else/let-else-non-diverging.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-non-diverging.rs) to ensure the `else` block diverges.\r\n* [`ui/let-else/let-else-run-pass.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-run-pass.rs) to ensure the feature works in some simple test case settings.\r\n* [`ui/let-else/let-else-scope.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-scope.rs) to ensure the bindings created by the outer `let` expression are not available in the `else` block of it.\r\n\r\nAdded by bf7c32a4477a76bfd18fdcd8f45a939cbed82d34:\r\n\r\n* [`ui/let-else/issue-89960.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/issue-89960.rs) as a regression test for the ICE-on-error bug #89960 . Later in 102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0 this got removed in favour of more comprehensive tests.\r\n\r\nAdded by 856541963ce95ef4f7d4a81784bb5002ccf63c93:\r\n\r\n* [`ui/let-else/let-else-if.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-if.rs) to test for the improved error message that points out that `let else if` is not possible.\r\n\r\nAdded by 9b45713b6c1775f0103a1ebee6ab7c6d9b781a21:\r\n\r\n* [`ui/let-else/let-else-allow-unused.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-allow-unused.rs) as a regression test for #89807, to ensure that `#[allow(...)]` attributes added to the entire `let` statement apply for bindings created by the `let else` pattern.\r\n\r\nAdded by 61bcd8d3075471b3867428788c49f54fffe53f52:\r\n\r\n* [`ui/let-else/let-else-non-copy.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-non-copy.rs) to ensure that a copy is performed out of non-copy wrapper types. This mirrors `if let` behaviour. The test case bases on rustc internal changes originally meant for #89933 but then removed from the PR due to the error prior to the improvements of #89841.\r\n* [`ui/let-else/let-else-source-expr-nomove-pass.rs `](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-source-expr-nomove-pass.rs) to ensure that while there is a move of the binding in the successful case, the `else` case can still access the non-matching value. This mirrors `if let` behaviour.\r\n\r\nAdded by 102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0:\r\n\r\n* [`ui/let-else/let-else-ref-bindings.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-ref-bindings.rs) and [`ui/let-else/let-else-ref-bindings-pass.rs `](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-ref-bindings-pass.rs) to check `ref` and `ref mut` keywords in the pattern work correctly and error when needed.\r\n\r\nAdded by 2715c5f984fda7faa156d1c9cf91aa4934f0e00f:\r\n\r\n* Match ergonomic tests adapted from the `rfc2005` test suite.\r\n\r\nAdded by fec8a507a27de1b08a0b95592dc8ec93bf0a321a:\r\n\r\n* [`ui/let-else/let-else-deref-coercion-annotated.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-deref-coercion-annotated.rs) and [`ui/let-else/let-else-deref-coercion.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-deref-coercion.rs) to check deref coercions.\r\n\r\n#### Added since this stabilization report was originally written (2022-02-09)\r\n\r\nAdded by 76ea56667703ac06689ff1d6fba5d170fa7392a7:\r\n\r\n* [`ui/let-else/let-else-destructuring.rs`](https://github.com/rust-lang/rust/blob/76ea56667703ac06689ff1d6fba5d170fa7392a7/src/test/ui/let-else/let-else-destructuring.rs) to give a nice error message if an user tries to do an assignment with a (possibly refutable) pattern and an `else` block, like asked for in #93995.\r\n\r\nAdded by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da:\r\n\r\n* [`ui/let-else/let-else-allow-in-expr.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-allow-in-expr.rs) to test whether `#[allow(unused_variables)]` works in the expr, as well as its non presence, as well as putting it on the entire `let else` *affects* the expr, too. This was adding a missing test as pointed out by the stabilization report.\r\n* Expansion of `ui/let-else/let-else-allow-unused.rs` and `ui/let-else/let-else-check.rs` to ensure that non-presence of `#[allow(unused)]` does issue the unused lint. This was adding a missing test case as pointed out by the stabilization report.\r\n\r\nAdded by 5bd71063b3810d977aa376d1e6dd7cec359330cc:\r\n\r\n* [`ui/let-else/let-else-slicing-error.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-slicing-error.rs), a regression test for #92069, which got fixed without addition of a regression test. This resolves a missing test as pointed out by the stabilization report.\r\n\r\nAdded by this PR:\r\n\r\n* `ui/let-else/let-else.rs`, a simple run-pass check, similar to `ui/let-else/let-else-run-pass.rs`.\r\n\r\nAdded by #94012:\r\n\r\n* TBD, the PR is not yet merged.\r\n\r\n### Things not currently tested\r\n\r\n* ~~The `#[allow(...)]` tests check whether allow works, but they don't check whether the non-presence of allow causes a lint to fire.~~ → *test added by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da*\r\n* ~~There is no `#[allow(...)]` test for the expression, as there are tests for the pattern and the else block.~~ → *test added by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da*\r\n* ~~`let-else-brace-before-else.rs` forbids the `let ... = {} else {}` pattern and there is a rustfix to obtain `let ... = ({}) else {}`. I'm not sure whether the `.fixed` files are checked by the tooling that they compile. But if there is no such check, it would be neat to make sure that `let ... = ({}) else {}` compiles.~~ → *test added by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da*\r\n* ~~#92069 got closed as fixed, but no regression test was added. Not sure it's worth to add one.~~ → *test added by 5bd71063b3810d977aa376d1e6dd7cec359330cc*\r\n\r\nDon't think these missing tests should block stabilization, they are rather details. But feel free to disagree.\r\n\r\n### Possible future work / Refutable destructuring assignments\r\n\r\n[RFC 2909](https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html) specifies destructuring assignment, allowing statements like `FooBar { a, b, c } = foo();`.\r\nAs it was stabilized, destructuring assignment only allows *irrefutable* patterns, which before the advent of `let else` were the only patterns that `let` supported.\r\nSo the combination of `let else` and destructuring assignments gives reason to think about extensions of the destructuring assignments feature that allow refutable patterns, discussed in #93995.\r\n\r\nA naive mapping of `let else` to destructuring assignments in the form of `Some(v) = foo() else { ... };` might not be the ideal way. `let else` needs a diverging `else` clause as it introduces new bindings, while assignments have a default behaviour to fall back to if the pattern does not match, in the form of not performing the assignment. Thus, there is no good case to require divergence, or even an `else` clause at all, beyond the need for having *some* introducer syntax so that it is clear to readers that the assignment is not a given (enums and structs look similar). There are better candidates for introducer syntax however than an empty `else {}` clause, like `maybe` which could be added as a keyword on an edition boundary:\r\n\r\n```Rust\r\nlet mut v = 0;\r\nmaybe Some(v) = foo(&v);\r\nmaybe Some(v) = foo(&v) else { bar() };\r\n```\r\n\r\nFurther design discussion is left to an RFC, or the linked issue.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-03T19:28:27",
            ),
            updated_at: Some(
                "2022-03-22T17:12:48",
            ),
            labels: [
                "T-rustdoc",
                "T-lang",
                "relnotes",
                "S-waiting-on-author",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "S-waiting-on-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1029383585,
            fk_issue: 1543435,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [x] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* need-consistency-rvalue-temporary-rules-between-let-and-let-else (https://github.com/rust-lang/rust/pull/93628#issuecomment-1055738523)\n* ~~not-while-rustfmt-breaks-on-it~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1032936704\n* ~~semicolon~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1059799661\n* ~~stabilization-report~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1033846359\n* ~~summarize-concerns~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1056785904\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-03T20:43:04",
            updated_at: Some(
                "2022-03-22T17:12:48",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2180,
            fk_issue: 1557773,
            fk_initiator: 64996,
            fk_initiating_comment: 1041836034,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1041836052,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 64996,
                    login: "alexcrichton",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1557773,
            number: 10383,
            fk_milestone: None,
            fk_user: 1940490,
            fk_assignee: Some(
                43198,
            ),
            open: true,
            is_pull_request: true,
            title: "Unstable --keep-going flag",
            body: "## Summary\r\n\r\nThis PR adds an unstable `--keep-going` flag documented as follows:\r\n\r\n> `cargo build --keep-going` (and similarly for `check`, `test` etc) will build as many crates in the dependency graph as possible, rather than aborting the build at the first one that fails to build.\r\n>\r\n> For example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo check -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo check -j1 --keep-going` would definitely run both builds, even if the one run first fails.\r\n>\r\n> The `-Z unstable-options` command-line option must be used in order to use `--keep-going` while it is not yet stable:\r\n>\r\n> ```console\r\n> cargo check --keep-going -Z unstable-options\r\n> ```\r\n\r\n## Prior art\r\n\r\n[Buck](https://buck.build/) and [Bazel](https://bazel.build/) and Make all have this flag (though Bazel calls it `--keep_going` :vomiting_face:) with exactly this behavior.\r\n\r\n## Motivation\r\n\r\nI need this in order to make https://github.com/dtolnay/trybuild not super slow.\r\n\r\nTrybuild wants to run Cargo on a bunch of test cases, each of which is a bin crate. The bad options currently available are:\r\n\r\n- Give each test case its own target dir and run build on them in parallel. This is bad because all the test cases have the same dependencies in common (whatever `dev-dependencies` are declared by the project). If there are 100 test cases, all the dependencies would end up getting built 100 times, which is 100x slower than necessary despite the parallelism.\r\n\r\n- Reuse a single target dir for all the test cases. Two Cargos can't operate in parallel on the same target directory, so this forces the test cases to be built serially. This is much slower than necessary on a many-core system, and compounds all of the overheads in Cargo because the project structure must be reloaded by each invocation.\r\n\r\nThe good option I'd like to switch to is:\r\n\r\n- Run `cargo build --bins --keep-going --message-format=json` to build *all* the test cases in parallel. Use the filepaths in the JSON messages to ascribe diagnostics to which bin they're from.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-12T08:07:44",
            ),
            updated_at: Some(
                "2022-03-22T01:39:57",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-review",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 1041836052,
            fk_issue: 1557773,
            fk_user: 20760818,
            body: "Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Eh2406\n* [x] @alexcrichton\n* [ ] @ehuss\n* [ ] @joshtriplett\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-16T16:16:57",
            updated_at: Some(
                "2022-02-16T16:16:59",
            ),
            repository: "rust-lang/cargo",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2187,
            fk_issue: 1573465,
            fk_initiator: 278509,
            fk_initiating_comment: 1054448088,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1054497120,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1573465,
            number: 1285,
            fk_milestone: None,
            fk_user: 29557119,
            fk_assignee: Some(
                278509,
            ),
            open: true,
            is_pull_request: true,
            title: "Add the rdm target feature to the sqrdmlsh intrinsic.",
            body: "I noticed the `sqrdmlsh` intrinsic was asserting for the wrong instruction and didn't have the rdm target feature.\r\n\r\nThis has removed the stabilization of this intrinsic, I'm not sure what the policy is here as the other rdm intrinsics haven't yet been stabilized.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-28T15:17:41",
            ),
            updated_at: Some(
                "2022-03-13T11:21:58",
            ),
            labels: [
                "T-libs-api",
            ],
            repository: "rust-lang/stdarch",
        },
        status_comment: StatusComment {
            id: 1054497120,
            fk_issue: 1573465,
            fk_user: 20760818,
            body: "Team member @Amanieu has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [ ] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-28T17:33:48",
            updated_at: Some(
                "2022-02-28T17:33:49",
            ),
            repository: "rust-lang/stdarch",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2222,
            fk_issue: 1356930,
            fk_initiator: 783247,
            fk_initiating_comment: 1075151992,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075152025,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1356930,
            number: 87074,
            fk_milestone: None,
            fk_user: 162737,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for RFC 3128: I/O Safety",
            body: "Feature gate: `#![feature(io_safety)]`\r\n\r\nThis is a tracking issue for [RFC 3128: I/O Safety](https://github.com/rust-lang/rfcs/pull/3128).\r\n\r\nRaw OS handles such as `RawFd` and `RawHandle` have hazards similar to raw pointers; they may be bogus or may dangle, leading to broken encapsulation boundaries and code whose behavior is impossible to bound in general.\r\n\r\nIntroduce a concept of *I/O safety*, and introduce a new set of types and traits, led by `OwnedFd` and `BorrowedFd`, to support it.\r\n\r\n### Public API\r\n\r\nThe public API on UNIX platforms consists of the types `OwnedFd` and `BorrowedFd`, the trait `AsFd`, and implementations of `AsFd`, `Into<OwnedFd>`, and `From<OwnedFd>` for various types (such as files and sockets).\r\n\r\nThe public API on Windows platforms consists of two sets of parallel types and traits and impls for `OwnedHandle`, `OwnedSocket`, `BorrowedHandle`, `BorrowedSocket`, etc.\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation (based on @sunfishcode's existing work outside of std)\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] This RFC doesn't define a formal model for raw handle ownership and lifetimes. The rules for raw handles in this RFC are vague about their identity. What does it mean for a resource lifetime to be associated with a handle if the handle is just an integer type? Do all integer types with the same value share that association?\r\n- [ ] The Rust [reference](https://doc.rust-lang.org/reference/behavior-considered-undefined.html) defines undefined behavior for memory in terms of [LLVM's pointer aliasing rules](http://llvm.org/docs/LangRef.html#pointer-aliasing-rules); I/O could conceivably need a similar concept of handle aliasing rules. This doesn't seem necessary for present practical needs, but it could be explored in the future.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-07-12T03:08:11",
            ),
            updated_at: Some(
                "2022-03-22T13:02:42",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "A-io",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1075152025,
            fk_issue: 1356930,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T13:02:40",
            updated_at: Some(
                "2022-03-22T13:02:42",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2188,
            fk_issue: 1401981,
            fk_initiator: 162737,
            fk_initiating_comment: 1054642118,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1054642132,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1401981,
            number: 88581,
            fk_milestone: None,
            fk_user: 3161395,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for `int_roundings`",
            body: "Feature gate: `#![feature(int_roundings)]`\r\n\r\nThis is a tracking issue for the `div_floor`, `div_ceil`, `next_multiple_of`, and `checked_multiple_of` methods on all integer types.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl {integer} {\r\n    pub const fn div_floor(self, rhs: Self) -> Self;\r\n    pub const fn div_ceil(self, rhs: Self) -> Self;\r\n    pub const fn next_multiple_of(self, rhs: Self) -> Self;\r\n    pub const fn checked_next_multiple_of(self, rhs: Self) -> Option<Self>;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #88582\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- None yet.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-09-02T05:24:48",
            ),
            updated_at: Some(
                "2022-03-18T06:04:54",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1054642132,
            fk_issue: 1401981,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* Should these panic or wrap around on overflow in release mode? (https://github.com/rust-lang/rust/issues/88581#issuecomment-1063388353)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-28T20:38:43",
            updated_at: Some(
                "2022-03-16T19:00:03",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2223,
            fk_issue: 1531088,
            fk_initiator: 783247,
            fk_initiating_comment: 1075284785,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075284811,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1531088,
            number: 93203,
            fk_milestone: None,
            fk_user: 783247,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for scoped threads",
            body: "Feature gate: `#![feature(scoped_threads)]`\r\n\r\nThis is a tracking issue for scoped threads.\r\n\r\nDocumentation: https://doc.rust-lang.org/nightly/std/thread/fn.scope.html\r\n\r\nRFC: https://rust-lang.github.io/rfcs/3151-scoped-threads.html\r\n\r\n### Example usage\r\n\r\n```rust\r\nlet local_var = vec![1, 2, 3];\r\n\r\nthread::scope(|s| {\r\n    s.spawn(|| println!(\"borrowed from thread #1: {:?}\", local_var));\r\n    s.spawn(|| println!(\"borrowed from thread #2: {:?}\", local_var));\r\n    println!(\"borrowed from the main thread: {:?}\", local_var);\r\n});\r\n```\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// std::thread\r\n\r\npub struct Scope<'scope, 'env: 'scope> { ... }\r\n\r\npub struct ScopedJoinHandle<'scope, T> { ... }\r\n\r\npub fn scope<'env, F, T>(f: F) -> T\r\nwhere\r\n    F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T;\r\n\r\nimpl Builder {\r\n    pub fn spawn_scoped<'scope, 'env, F, T>(\r\n        self,\r\n        scope: &'scope Scope<'env>,\r\n        f: F,\r\n    ) -> io::Result<ScopedJoinHandle<'scope, T>>\r\n    where\r\n        F: FnOnce() -> T + Send + 'scope,\r\n        T: Send + 'scope;\r\n}\r\n\r\nimpl<'scope, 'env> Scope<'scope, 'env> {\r\n    pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\r\n    where\r\n        F: FnOnce() -> T + Send + 'scope,\r\n        T: Send + 'scope;\r\n}\r\n\r\nimpl<'scope, T> ScopedJoinHandle<'scope, T> {\r\n    pub fn join(self) -> Result<T>;\r\n    pub fn thread(&self) -> &Thread;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] RFC attempt 1: https://github.com/rust-lang/rfcs/pull/2647\r\n- [x] RFC attempt 2: https://github.com/rust-lang/rfcs/pull/3151\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/92555\r\n- [x] Change signatures a bit to remove the argument to the spawn closures: https://github.com/rust-lang/rust/pull/94559\r\n- [x] Fix soundness issue in implementation: https://github.com/rust-lang/rust/pull/94644\r\n- [x] Document lifetimes: https://github.com/rust-lang/rust/pull/94763\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- [x] Can we omit the `&Scope` argument to the functions given to `.spawn()`? That is, `scope.spawn(|| ..)` rather than `scope.spawn(|_| ..)`.\r\n  - It's already possible by forcing the user to use `move || ..` instead, but that's not great. Maybe the language could be subtly changed to capture references or certain `Copy` types by value rather than by reference(-to-reference).\r\n  - See also [this comment](https://github.com/rust-lang/rfcs/pull/3151#issuecomment-883251161) and the collapsed section in [the comment below](https://github.com/rust-lang/rust/issues/93203#issuecomment-1019293467).\r\n  - Mostly answered in [this comment](https://github.com/rust-lang/rust/issues/93203#issuecomment-1040720703).\r\n  - Working idea in [this comment](https://github.com/rust-lang/rust/issues/93203#issuecomment-1040798286).\r\n  - Implementation in https://github.com/rust-lang/rust/pull/94559\r\n- [x] How to document the `'env` and `'scope` lifetimes clearly without scaring people away.\r\n  - https://github.com/rust-lang/rust/pull/94763\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-22T14:52:22",
            ),
            updated_at: Some(
                "2022-03-22T20:19:33",
            ),
            labels: [
                "A-runtime",
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1075284811,
            fk_issue: 1531088,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T14:54:10",
            updated_at: Some(
                "2022-03-22T15:08:16",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2224,
            fk_issue: 1540023,
            fk_initiator: 162737,
            fk_initiating_comment: 1075444253,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075453670,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1540023,
            number: 1152,
            fk_milestone: None,
            fk_user: 928074,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "Specify guarantees for repr(rust) structs",
            body: "Closes: #1151",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-31T13:06:24",
            ),
            updated_at: Some(
                "2022-03-22T19:01:34",
            ),
            labels: [
                "I-lang-nominated",
                "T-lang",
            ],
            repository: "rust-lang/reference",
        },
        status_comment: StatusComment {
            id: 1075453670,
            fk_issue: 1540023,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @cramertj\n* [x] @joshtriplett\n* [ ] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T18:00:29",
            updated_at: Some(
                "2022-03-22T18:00:32",
            ),
            repository: "rust-lang/reference",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2225,
            fk_issue: 1554600,
            fk_initiator: 155238,
            fk_initiating_comment: 1075521037,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075521903,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1554600,
            number: 1163,
            fk_milestone: None,
            fk_user: 1046063,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "Clarify guarantees provided by repr(packed)",
            body: "Clarify that `repr(packed)` minimizes inter-field padding and, in the special case of `repr(packed(1))`/`repr(packed)`, guarantees no inter-field padding.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-09T14:32:29",
            ),
            updated_at: Some(
                "2022-03-22T20:03:06",
            ),
            labels: [
                "I-lang-nominated",
                "T-lang",
            ],
            repository: "rust-lang/reference",
        },
        status_comment: StatusComment {
            id: 1075521903,
            fk_issue: 1554600,
            fk_user: 20760818,
            body: "Team member @nikomatsakis has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @cramertj\n* [ ] @joshtriplett\n* [x] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T19:01:41",
            updated_at: Some(
                "2022-03-22T19:01:42",
            ),
            repository: "rust-lang/reference",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2192,
            fk_issue: 30499,
            fk_initiator: 783247,
            fk_initiating_comment: 1057368222,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1057368239,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 30499,
            number: 41263,
            fk_milestone: None,
            fk_user: 18526288,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking issue for `ToOwned::clone_into` (`toowned_clone_into`)",
            body: "Feature added in PR https://github.com/rust-lang/rust/pull/41009\r\n\r\nQuestions raised in the PR:\r\n\r\n- [ ] The directionality is weird. In clone_from and assignment, the data moves right-to-left, but this moves it left-to-right. And that means that autoref doesn't work well, usually forcing you to write &mut.\r\n\r\n- [ ] But fixing that would mean putting it somewhere else, since the Self in ToOwned is the wrong type for what this needs to be. And moving it while still being overridable and providing a default is hard.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2017-04-13T00:10:07",
            ),
            updated_at: Some(
                "2022-03-09T18:04:40",
            ),
            labels: [
                "T-libs-api",
                "B-unstable",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "Libs-Tracked",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1057368239,
            fk_issue: 30499,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-02T20:55:07",
            updated_at: Some(
                "2022-03-09T18:04:40",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2193,
            fk_issue: 1436141,
            fk_initiator: 162737,
            fk_initiating_comment: 1057495148,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1057495167,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1436141,
            number: 89780,
            fk_milestone: None,
            fk_user: 1940490,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for poll.ready()?",
            body: "Feature gate: `#![feature(poll_ready)]`\r\n\r\nThis is a tracking issue for the `core::task::Poll::ready` method, which combined with `?` potentially supplants the `ready!` macro of #70922.\r\n\r\n```diff\r\n- let val = ready!(fut.poll(cx));\r\n+ let val = fut.poll(cx).ready()?;\r\n```\r\n\r\n### Public API\r\n\r\n```rust\r\n// core::task\r\n\r\nimpl<T> Poll<T> {\r\n    pub fn ready(self) -> Ready<T>;\r\n}\r\n\r\npub struct Ready<T> {...}\r\n\r\nimpl<T> Try for Ready<T> {\r\n    type Output = T;\r\n    type Residual = Ready<Infallible>;\r\n    ...\r\n}\r\n\r\nimpl<T> FromResidual for Ready<T> {...}\r\n\r\nimpl<T> FromResidual<Ready<Infallible>> for Poll<T> {...}\r\n\r\nimpl<T> Debug for Ready<T> {...}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #89651\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- ?",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-10-11T19:15:35",
            ),
            updated_at: Some(
                "2022-03-22T19:52:49",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "A-async-await",
                "AsyncAwait-Triaged",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1057495167,
            fk_issue: 1436141,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [ ] @yaahc\n\nConcerns:\n\n* try impl contradicts existing try impls (https://github.com/rust-lang/rust/issues/89780#issuecomment-1075570747)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-02T23:31:12",
            updated_at: Some(
                "2022-03-22T19:49:49",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2194,
            fk_issue: 8163,
            fk_initiator: 173127,
            fk_initiating_comment: 1059258728,
            disposition: Some(
                "close",
            ),
            fk_bot_tracking_comment: 1059258740,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 77424,
                    login: "eddyb",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 332036,
                    login: "oli-obk",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 679122,
                    login: "nagisa",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 831192,
                    login: "wesleywiser",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1295100,
                    login: "davidtwco",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1408859,
                    login: "Aaron1011",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1606434,
                    login: "estebank",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1822483,
                    login: "cjgillot",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1825894,
                    login: "michaelwoerister",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5751617,
                    login: "petrochenkov",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 20113453,
                    login: "matthewjasper",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 29864074,
                    login: "lcnr",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 8163,
            number: 20561,
            fk_milestone: None,
            fk_user: 709807,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking issue for Consistent no-prelude attribute (RFC 501)",
            body: "https://github.com/rust-lang/rfcs/pull/501\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2015-01-05T05:56:57",
            ),
            updated_at: Some(
                "2022-03-07T06:48:35",
            ),
            labels: [
                "B-RFC-approved",
                "T-compiler",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-close",
                "S-tracking-design-concerns",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1059258740,
            fk_issue: 8163,
            fk_user: 20760818,
            body: "Team member @pnkfelix has proposed to close this. The next step is review by the rest of the tagged team members:\n\n* [x] @Aaron1011\n* [ ] @cjgillot\n* [x] @davidtwco\n* [x] @eddyb\n* [ ] @estebank\n* [x] @lcnr\n* [x] @matthewjasper\n* [ ] @michaelwoerister\n* [ ] @nagisa\n* [ ] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [x] @pnkfelix\n* [x] @wesleywiser\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-04T15:23:33",
            updated_at: Some(
                "2022-03-07T06:48:35",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2195,
            fk_issue: 1575673,
            fk_initiator: 1993852,
            fk_initiating_comment: 1059571313,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1059571324,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1575673,
            number: 94530,
            fk_milestone: None,
            fk_user: 51362316,
            fk_assignee: Some(
                162737,
            ),
            open: true,
            is_pull_request: true,
            title: "Implement Copy, Clone, PartialEq and Eq for core::fmt::Alignment",
            body: "Alignment is a fieldless exhaustive enum, so it is already possible to\r\nclone and compare it by matching, but it is inconvenient to do so. For\r\nexample, if one would like to create a struct describing a formatter\r\nconfiguration and provide a clone implementation:\r\n\r\n```rust\r\npub struct Format {\r\n    fill: char,\r\n    width: Option<usize>,\r\n    align: fmt::Alignment,\r\n}\r\n\r\nimpl Clone for Format {\r\n    fn clone(&self) -> Self {\r\n        Format {\r\n            align: match self.align {\r\n                fmt::Alignment::Left => fmt::Alignment::Left,\r\n                fmt::Alignment::Right => fmt::Alignment::Right,\r\n                fmt::Alignment::Center => fmt::Alignment::Center,\r\n            },\r\n            .. *self\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDerive Copy, Clone, PartialEq, and Eq for Alignment for convenience.\r\n\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-02T17:35:18",
            ),
            updated_at: Some(
                "2022-03-16T21:07:25",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1059571324,
            fk_issue: 1575673,
            fk_user: 20760818,
            body: "Team member @yaahc has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-04T22:17:57",
            updated_at: Some(
                "2022-03-16T21:07:25",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2199,
            fk_issue: 1523566,
            fk_initiator: 783247,
            fk_initiating_comment: 1062923482,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1062923488,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1523566,
            number: 92939,
            fk_milestone: None,
            fk_user: 6182002,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for windows_process_extensions_raw_arg",
            body: "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(windows_process_extensions_raw_arg)]`\r\n\r\nThis is a tracking issue for the raw_arg extension to `std::process::Command` on Windows.\r\n\r\nWindows programs on the lowest API layers actually aren't required to accept arguments as an array of strings.\r\nIn fact the illusion that they do accept arguments as an array of strings is mostly maintained by one function. [CommandLineToArgvW](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw). Not all programs use that function to parse arguments. Some of the programs that don't do this are really important, like `cmd.exe`. These programs instead read their argument as one large string, which makes them incompatible with how `std::process::Command::arg` passes the arguments. `std::process::Command::arg` assumes the program will parse the string using `CommandLineToArgvW`. Most of the time this is a reasonable assumption to make.\r\n\r\nSolution: `raw_arg`. Strings passed via `raw_arg` are sent straight through with no alteration, save for inserting spaces inbetween them. Raw args are not quoted, escaped, or really anything complicated like that. This makes them compatible with Windows executable files which don't use [CommandLineToArgvW](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw).\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\nuse std::process::Command;\r\n\r\n// This will print\r\n// \"Hello World!\"\r\n// with the quotes, which is not possible with std::process::Command and `cmd.exe`\r\n// with the current `.arg()` method.\r\nlet cmd = Command::new(\"cmd.exe\").raw_arg(\"/C echo \\\"Hello World!\\\"\");\r\n\r\n// You can also chain this\r\nCommand::new(\"cmd.exe\")\r\n        .raw_arg(\"/C\")\r\n        .raw_arg(\"echo\")\r\n        .raw_arg(\"\\\"Hello World!\\\"\")\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #85832\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR #92942\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-15T18:35:41",
            ),
            updated_at: Some(
                "2022-03-16T21:06:45",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1062923488,
            fk_issue: 1523566,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-09T13:30:27",
            updated_at: Some(
                "2022-03-16T21:06:45",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2200,
            fk_issue: 1526589,
            fk_initiator: 783247,
            fk_initiating_comment: 1062941258,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1062941276,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1526589,
            number: 93044,
            fk_milestone: None,
            fk_user: 105766,
            fk_assignee: Some(
                783247,
            ),
            open: true,
            is_pull_request: true,
            title: "Add forwarding impls for Read, Write, Seek to Arc, Rc",
            body: "This adds forwarding impls for `std::io::Read`, `std::io::Write`, and `std::io::Seek` to `alloc:sync::Arc` and `alloc::rc::Rc`. This is relevant for types such as `std::fs::File`, `std::net::TcpStream`, and `std::os::unix::UnixStream` which [implement `Read`, `Write`, and `Seek` for `&T`](https://doc.rust-lang.org/stable/std/io/trait.Read.html#impl-Read-12).\r\n\r\nIt is currently possible to do this manually through wrappers (See the \"Implement a forwarding wrapper by hand\" section for an example), but providing forwarding impls makes this pattern nicer to use. In some cases this can also be done with an extra reference, as shown below:\r\n\r\n```rust\r\nlet stream = TcpStream::connect(\"localhost:8080\");\r\nlet stream = Arc::new(stream);\r\n\r\n&stream1.write(b\"hello world\")?; // OK: Read is available for &Arc<TcpStream>.\r\nstream1.write(b\"hello world\")?;  // Error: Read is not available for Arc<TcpStream>.\r\n                                 // (Enabled by this PR)\r\n```\r\n\r\nThe reason why we want `Arc<T>: Read where &T: Read` is because this enables `Arc<T>` to be passed directly into APIs which expect `T: Read`:\r\n\r\n```rust\r\nfn operate<R: Read>(reader: R) {}\r\n\r\nlet stream = TcpStream::connect(\"localhost:8080\");\r\nlet stream = Arc::new(stream);\r\noperate(stream);  // Error: `Arc<TcpStream>` does not implement `Read`\r\n                  // (Enabled by this PR)\r\n```\r\n\r\n## Implement a forwarding wrapper by hand\r\n\r\nThese trait impls do not allow anything which wasn't allowed before. Dereferencing to the inner type to get `Arc<T>: Read` to work is already possible by creating an intermediate type, as shown here:\r\n\r\n```rust\r\n/// A variant of `Arc` that delegates IO traits if available on `&T`.\r\n#[derive(Debug)]\r\npub struct IoArc<T>(Arc<T>);\r\n\r\nimpl<T> IoArc<T> {\r\n    /// Create a new instance of IoArc.\r\n    pub fn new(data: T) -> Self {\r\n        Self(Arc::new(data))\r\n    }\r\n}\r\n\r\nimpl<T> Read for IoArc<T>\r\nwhere\r\n    for<'a> &'a T: Read,\r\n{\r\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\r\n        (&mut &*self.0).read(buf)\r\n    }\r\n}\r\n\r\nimpl<T> Write for IoArc<T>\r\nwhere\r\n    for<'a> &'a T: Write,\r\n{\r\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\r\n        (&mut &*self.0).write(buf)\r\n    }\r\n\r\n    fn flush(&mut self) -> io::Result<()> {\r\n        (&mut &*self.0).flush()\r\n    }\r\n}\r\n\r\n// forward `Clone`, `Seek` as well here\r\n```\r\n\r\n## References\r\n\r\n- [IO trait delegation for `Arc` blog post](https://blog.yoshuawuyts.com/io-trait-delegation-for-arc/)\r\n- [`async-dup` crate](https://docs.rs/async-dup/latest/async_dup/)\r\n- [`io-arc` crate](https://docs.rs/io-arc/latest/io_arc/)\r\n\r\nJoint work with @yoshuawuyts. ",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-18T18:28:24",
            ),
            updated_at: Some(
                "2022-03-09T20:30:56",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "S-waiting-on-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1062941276,
            fk_issue: 1526589,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [x] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nConcerns:\n\n* behavior on impls that mutate the reference (https://github.com/rust-lang/rust/pull/93044#issuecomment-1063283366)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-09T13:50:59",
            updated_at: Some(
                "2022-03-09T19:31:27",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2201,
            fk_issue: 1515212,
            fk_initiator: 155238,
            fk_initiating_comment: 1064213230,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1064213248,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1515212,
            number: 3216,
            fk_milestone: None,
            fk_user: 1408859,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "Allow using `for<'a>` syntax when declaring closures",
            body: "[Rendered](https://github.com/Aaron1011/rfcs/blob/higher-ranked-closure/text/0000-closure-lifetime-binder.md)\r\n\r\nAllow declaring closures using the `for<'a>` syntax:\r\n\r\n```rust\r\nlet closure = for<'a> |val: &'a u8| println!(\"Val: {:?}\", val);\r\nclosure(&25);\r\n```\r\n\r\nThis guarantees that the closure will use a higher-ranked lifetime, regardless of how the closure is used in the rest of the function.\r\n\r\nThis went through a pre-RFC at https://internals.rust-lang.org/t/pre-rfc-allow-for-a-syntax-with-closures-for-explicit-higher-ranked-lifetimes/15888. Thank you to everyone who provided feedback!",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-06T21:27:47",
            ),
            updated_at: Some(
                "2022-03-22T17:12:19",
            ),
            labels: [
                "T-lang",
                "proposed-final-comment-period",
                "disposition-merge",
                "I-lang-nominated",
            ],
            repository: "rust-lang/rfcs",
        },
        status_comment: StatusComment {
            id: 1064213248,
            fk_issue: 1515212,
            fk_user: 20760818,
            body: "Team member @nikomatsakis has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [x] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* add-third-alternative (https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064214419)\n* grammatical-ambiguities (https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064215076)\n* ~~ultimate-syntax~~ resolved by https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1068270337\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-10T15:56:15",
            updated_at: Some(
                "2022-03-22T17:11:16",
            ),
            repository: "rust-lang/rfcs",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2202,
            fk_issue: 1458601,
            fk_initiator: 831192,
            fk_initiating_comment: 1064452035,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1064452047,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 77424,
                    login: "eddyb",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 332036,
                    login: "oli-obk",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 679122,
                    login: "nagisa",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 831192,
                    login: "wesleywiser",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1295100,
                    login: "davidtwco",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1408859,
                    login: "Aaron1011",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1606434,
                    login: "estebank",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1822483,
                    login: "cjgillot",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1825894,
                    login: "michaelwoerister",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5751617,
                    login: "petrochenkov",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 20113453,
                    login: "matthewjasper",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 29864074,
                    login: "lcnr",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1458601,
            number: 3191,
            fk_milestone: None,
            fk_user: 91507758,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "New Rust attribute to support embedding debugger visualizers",
            body: "This RFC adds support for a new Rust attribute that will embed a debugger visualizer into a PDB/ELF.\r\n\r\n[Internals thread](https://internals.rust-lang.org/t/pre-rfc-natvis-support-for-rust/15477)\r\n\r\n[Rendered](https://github.com/ridwanabdillahi/rfcs/blob/natvis/text/0000-debugger-visualizer.md)",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-11-03T21:00:27",
            ),
            updated_at: Some(
                "2022-03-22T18:56:49",
            ),
            labels: [
                "T-lang",
                "T-compiler",
                "proposed-final-comment-period",
                "disposition-merge",
            ],
            repository: "rust-lang/rfcs",
        },
        status_comment: StatusComment {
            id: 1064452047,
            fk_issue: 1458601,
            fk_user: 20760818,
            body: "Team member @wesleywiser has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Aaron1011\n* [x] @cjgillot\n* [x] @cramertj\n* [x] @davidtwco\n* [x] @eddyb\n* [x] @estebank\n* [x] @joshtriplett\n* [ ] @lcnr\n* [ ] @matthewjasper\n* [x] @michaelwoerister\n* [ ] @nagisa\n* [x] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [x] @pnkfelix\n* [x] @scottmcm\n* [x] @wesleywiser\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-10T20:00:38",
            updated_at: Some(
                "2022-03-22T18:56:49",
            ),
            repository: "rust-lang/rfcs",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2203,
            fk_issue: 1582911,
            fk_initiator: 162737,
            fk_initiating_comment: 1064599945,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1064599953,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1582911,
            number: 94786,
            fk_milestone: None,
            fk_user: 1046063,
            fk_assignee: Some(
                162737,
            ),
            open: true,
            is_pull_request: true,
            title: "Document NonZeroXxx layout guarantees",
            body: "Document that `NonZeroXxx` has the same layout and bit validity as `Xxx` with the exception of `0`.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-09T21:53:25",
            ),
            updated_at: Some(
                "2022-03-16T21:05:45",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1064599953,
            fk_issue: 1582911,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* implications (https://github.com/rust-lang/rust/pull/94786#issuecomment-1065261648)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-10T23:09:24",
            updated_at: Some(
                "2022-03-16T21:05:45",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2204,
            fk_issue: 1524479,
            fk_initiator: 18526288,
            fk_initiating_comment: 1065659256,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065659273,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1524479,
            number: 92980,
            fk_milestone: None,
            fk_user: 330628,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for const offset_from (const_ptr_offset_from)",
            body: "The feature gate for the issue is `#![feature(const_ptr_offset_from)]`.\r\n\r\nThis tracks `const`ness of the following function(s):\r\n```rust\r\nimpl<T> *const T {\r\n  const unsafe fn offset_from(self, origin: *const T) -> isize\r\n}\r\n```\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implementation\r\n- Stabilization report: https://github.com/rust-lang/rust/issues/92980#issuecomment-1065644848\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- Should we allow calling this function in case both pointers point to the same allocation (in terms of their provenance) but are not both in-bounds? Cc https://github.com/rust-lang/rust/issues/92512 <br>    → this can be resolved post-stabilization since it is backwards compatible\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n- see https://github.com/rust-lang/rust/issues/41079\r\n- https://github.com/rust-lang/rust/pull/94827",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-16T19:22:52",
            ),
            updated_at: Some(
                "2022-03-22T17:13:42",
            ),
            labels: [
                "T-lang",
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065659273,
            fk_issue: 1524479,
            fk_user: 20760818,
            body: "Team member @scottmcm has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @cramertj\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [ ] @nikomatsakis\n* [ ] @pnkfelix\n* [x] @scottmcm\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-11T23:46:56",
            updated_at: Some(
                "2022-03-22T17:13:42",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2205,
            fk_issue: 920007,
            fk_initiator: 783247,
            fk_initiating_comment: 1065939508,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065939514,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 920007,
            number: 71941,
            fk_milestone: None,
            fk_user: 291359,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for `NonNull<[T]>::slice_from_raw_parts`",
            body: "This is a tracking issue for the `NonNull<[T]>::slice_from_raw_parts` method proposed in PR https://github.com/rust-lang/rust/pull/71940.\r\nThe feature gates for the issue are `#![feature(nonnull_slice_from_raw_parts)]`, and `#![feature(const_nonnull_slice_from_raw_parts)]` for using as a `const fn`.\r\n\r\n### API\r\n\r\n```rust\r\nimpl<T> NonNull<[T]> {\r\n  pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self;\r\n}\r\n```\r\n\r\nDocs: https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.slice_from_raw_parts\r\n\r\n### Steps\r\n\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/71940\r\n- [ ] FCP: https://github.com/rust-lang/rust/issues/71941#issuecomment-1065939514\r\n- [ ] Stabilization PR\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2020-05-06T05:55:51",
            ),
            updated_at: Some(
                "2022-03-16T21:04:47",
            ),
            labels: [
                "T-libs-api",
                "B-unstable",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "A-slice",
                "Libs-Tracked",
                "Libs-Small",
                "A-raw-pointers",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065939514,
            fk_issue: 920007,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-12T18:42:00",
            updated_at: Some(
                "2022-03-16T21:04:47",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2206,
            fk_issue: 1578761,
            fk_initiator: 783247,
            fk_initiating_comment: 1065939865,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065939867,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1578761,
            number: 94640,
            fk_milestone: None,
            fk_user: 81013316,
            fk_assignee: Some(
                1993852,
            ),
            open: true,
            is_pull_request: true,
            title: "Partially stabilize `(const_)slice_ptr_len` feature by stabilizing `NonNull::len`",
            body: "This PR partially stabilizes features `const_slice_ptr_len` and `slice_ptr_len` by only stabilizing `NonNull::len`. This partial stabilization is tracked under features `slice_ptr_len_nonnull` and `const_slice_ptr_len_nonnull`, for which this PR can serve as the tracking issue.\r\n\r\nTo summarize the discussion from #71146 leading up to this partial stabilization request:\r\n\r\nIt's currently a bit footgunny to obtain the length of a raw slice pointer, stabilization of `NonNull:len` will help with removing these footguns. Some example footguns are:\r\n\r\n```rust\r\n/// # Safety\r\n/// The caller must ensure that `ptr`:\r\n/// 1. does not point to memory that was previously allocated but is now deallocated;\r\n/// 2. is within the bounds of a single allocated object;\r\n/// 3. does not to point to a slice for which the length exceeds `isize::MAX` bytes;\r\n/// 4. points to a properly aligned address;\r\n/// 5. does not point to uninitialized memory;\r\n/// 6. does not point to a mutably borrowed memory location.\r\npub unsafe fn ptr_len<T>(ptr: core::ptr::NonNull<[T]>) -> usize {\r\n   (&*ptr.as_ptr()).len()\r\n}\r\n```\r\n\r\nA slightly less complicated version (but still more complicated than it needs to be):\r\n\r\n```rust\r\n/// # Safety\r\n/// The caller must ensure that the start of `ptr`:\r\n/// 1. does not point to memory that was previously allocated but is now deallocated;\r\n/// 2. must be within the bounds of a single allocated object.\r\npub unsafe fn ptr_len<T>(ptr: NonNull<[T]>) -> usize {\r\n   (&*(ptr.as_ptr() as *const [()])).len()\r\n}\r\n```\r\n\r\nThis PR does not stabilize `<*const [T]>::len` and  `<*mut [T]>::len` because the tracking issue #71146 list a potential blocker for these methods, but this blocker [does not apply](https://github.com/rust-lang/rust/issues/71146#issuecomment-808735714) to `NonNull::len`.\r\n\r\nWe should probably also ping the [Constant Evaluation WG](https://github.com/rust-lang/const-eval) since this PR includes a `#[rustc_allow_const_fn_unstable(const_slice_ptr_len)]`. My instinct here is that this will probably be okay because the pointer is not actually dereferenced and `len()` does not touch the address component of the pointer, but would be best to double check :)\r\n\r\nOne potential down-side was raised that stabilizing `NonNull::len` could lead to encouragement of coding patterns like:\r\n\r\n```\r\npub fn ptr_len<T>(ptr: *mut [T]) -> usize {\r\n   NonNull::new(ptr).unwrap().len()\r\n}\r\n```\r\n\r\nwhich unnecessarily assert non-nullness. However, these are much less of a footgun than the above examples and this should be resolved when `slice_ptr_len` fully stabilizes eventually.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-05T11:09:04",
            ),
            updated_at: Some(
                "2022-03-18T17:21:27",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "S-waiting-on-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065939867,
            fk_issue: 1578761,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-12T18:44:19",
            updated_at: Some(
                "2022-03-18T17:20:57",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2207,
            fk_issue: 1215172,
            fk_initiator: 783247,
            fk_initiating_comment: 1065947789,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065947793,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1215172,
            number: 82223,
            fk_milestone: None,
            fk_user: 860665,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for `Result::into_ok_or_err` / `feature(result_into_ok_or_err)`",
            body: "Feature gate: `#![feature(result_into_ok_or_err)]`\r\n\r\nThis is a tracking issue for `Result::into_ok_or_err`, a method to get the `T` out of `Result<T, T>` regardless of which variant is active.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl<T> Result<T, T> {\r\n    pub const fn into_ok_or_err(self) -> T;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #80572\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] ~~What color should the bikeshed be~~ What name should it have?\r\n  Some options that have been suggested:\r\n    - `Result::into_ok_or_err`\r\n    - `Result::ok_or_err`\r\n    - `Result::into_either`\r\n    - `Result::into_inner`\r\n    - `Result::either_value`\r\n    - `Result::unwrap_either`\r\n    - Several more suggested options are listed in the issue.\r\n - [ ] Do we want a reference version as well, as https://github.com/rust-lang/rust/pull/79315 proposed?",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-02-17T17:03:21",
            ),
            updated_at: Some(
                "2022-03-16T21:03:25",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065947793,
            fk_issue: 1215172,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nConcerns:\n\n* rather not (https://github.com/rust-lang/rust/issues/82223#issuecomment-1065985610)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-12T19:24:40",
            updated_at: Some(
                "2022-03-16T21:03:25",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2209,
            fk_issue: 1370510,
            fk_initiator: 162737,
            fk_initiating_comment: 1066980299,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1066980319,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1370510,
            number: 87517,
            fk_milestone: None,
            fk_user: 173127,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for RFC 3107: derive_default_enum",
            body: "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! 📜 Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the RFC 3107: \"`#[derive(Default)]` on enums with a `#[default]` attribute\" (rust-lang/rfcs#3107).\r\nThe feature gate for the issue is `#![feature(derive_default_enum)]`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement the RFC (cc @rust-lang/compiler  -- can anyone write up mentoring\r\n      instructions?)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\nNone so far\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-07-27T16:15:22",
            ),
            updated_at: Some(
                "2022-03-19T11:34:23",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "S-tracking-ready-to-stabilize",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1066980319,
            fk_issue: 1370510,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-14T15:50:13",
            updated_at: Some(
                "2022-03-19T11:34:23",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2210,
            fk_issue: 1586861,
            fk_initiator: 162737,
            fk_initiating_comment: 1067658430,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1067658436,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1586861,
            number: 94927,
            fk_milestone: None,
            fk_user: 17877264,
            fk_assignee: Some(
                1606434,
            ),
            open: true,
            is_pull_request: true,
            title: "Stabilize `let_chains` in Rust 1.62.0",
            body: "# Stabilization proposal\r\n\r\nThis PR proposes the stabilization of `#![feature(let_chains)]` in a future-compatibility way that will allow the **possible** addition of the `EXPR is PAT` syntax.\r\n\r\nTracking issue: #53667\r\nVersion: 1.62 (2022-05-17 => beta, 2022-06-30 => stable).\r\n\r\n## What is stabilized\r\n\r\nThe ability to chain let expressions along side local variable declarations or ordinary conditional expressions. For example:\r\n\r\n```rust\r\npub enum Color {\r\n    Blue,\r\n    Red,\r\n    Violet,\r\n}\r\n\r\npub enum Flower {\r\n    Rose,\r\n    Tulip,\r\n    Violet,\r\n}\r\n\r\npub fn roses_are_red_violets_are_blue_printer(\r\n    (first_flower, first_flower_color): (Flower, Color),\r\n    (second_flower, second_flower_color): (Flower, Color),\r\n    pick_up_lines: &[&str],\r\n) {\r\n    if let Flower::Rose = first_flower\r\n        && let Color::Red = first_flower_color\r\n        && let Flower::Violet = second_flower\r\n        && let Color::Blue = second_flower_color\r\n        && let &[first_pick_up_line, ..] = pick_up_lines\r\n    {\r\n        println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    roses_are_red_violets_are_blue_printer(\r\n        (Flower::Rose, Color::Red),\r\n        (Flower::Violet, Color::Blue),\r\n        &[\"sugar is sweet and so are you\"],\r\n    );\r\n}\r\n```\r\n\r\n## Motivation\r\n\r\nThe main motivation for this feature is improving readability, ergonomics and reducing paper cuts.\r\n\r\nFor more examples, see the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md).\r\n\r\n## What isn't stabilized\r\n\r\n* Let chains in match guards (`if_let_guard`)\r\n\r\n* Resolution of divergent non-terminal matchers\r\n\r\n* The `EXPR is PAT` syntax\r\n\r\n## History\r\n\r\n* On 2017-12-24, [RFC: if- and while-let-chains](https://github.com/rust-lang/rfcs/pull/2260)\r\n* On 2018-07-12, [eRFC: if- and while-let-chains, take 2](https://github.com/rust-lang/rfcs/pull/2497)\r\n* On 2018-08-24, [Tracking issue for eRFC 2497, \"if- and while-let-chains, take 2](https://github.com/rust-lang/rust/issues/53667)\r\n* On 2019-03-19, [Run branch cleanup after copy prop](https://github.com/rust-lang/rust/pull/59290)\r\n* On 2019-03-26, [Generalize diagnostic for x = y where bool is the expected type](https://github.com/rust-lang/rust/pull/59439)\r\n* On 2019-04-24, [Introduce hir::ExprKind::Use and employ in for loop desugaring](https://github.com/rust-lang/rust/pull/60225)\r\n* On 2019-03-19, [[let_chains, 1/6] Remove hir::ExprKind::If](https://github.com/rust-lang/rust/pull/59288)\r\n* On 2019-05-15, [[let_chains, 2/6] Introduce Let(..) in AST, remove IfLet + WhileLet and parse let chains](https://github.com/rust-lang/rust/pull/60861)\r\n* On 2019-06-20, [[let_chains, 3/6] And then there was only Loop](https://github.com/rust-lang/rust/pull/61988)\r\n* On 2020-11-22, [Reintroduce hir::ExprKind::If](https://github.com/rust-lang/rust/pull/79328)\r\n* On 2020-12-24, [Introduce hir::ExprKind::Let - Take 2](https://github.com/rust-lang/rust/pull/80357)\r\n* On 2021-02-19, [Lower condition of if expression before it's \"then\" block](https://github.com/rust-lang/rust/pull/82308)\r\n* On 2021-09-01, [Fix drop handling for `if let` expressions](https://github.com/rust-lang/rust/pull/88572)\r\n* On 2021-09-04, [Formally implement let chains](https://github.com/rust-lang/rust/pull/88642)\r\n* On 2022-01-19, [Add tests to ensure that let_chains works with if_let_guard](https://github.com/rust-lang/rust/pull/93086)\r\n* On 2022-01-18, [Introduce `enhanced_binary_op` feature](https://github.com/rust-lang/rust/pull/93049)\r\n* On 2022-01-22, [Fix `let_chains` and `if_let_guard` feature flags](https://github.com/rust-lang/rust/pull/93213)\r\n* On 2022-02-25, [Initiate the inner usage of `let_chains`](https://github.com/rust-lang/rust/pull/94376)\r\n* On 2022-01-28, [[WIP] Introduce ast::StmtKind::LetElse to allow the usage of `let_else` with `let_chains`](https://github.com/rust-lang/rust/pull/93437)\r\n* On 2022-02-26, [1 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94396)\r\n* On 2022-02-26, [2 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94400)\r\n* On 2022-02-27, [3 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94420)\r\n* On 2022-02-28, [4 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94445)\r\n* On 2022-02-28, [5 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94448)\r\n* On 2022-02-28, [6 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94465)\r\n* On 2022-03-01, [7 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94476)\r\n* On 2022-03-01, [8 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94484)\r\n* On 2022-03-01, [9 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94498)\r\n* On 2022-03-08, [Warn users about `||` in let chain expressions](https://github.com/rust-lang/rust/pull/94754)\r\n\r\nFrom the first RFC (2017-12-24) to the theoretical future stabilization day (2022-06-30), it can be said that this feature took 4 years, 6 months and 7 days of research, development, discussions, agreements/consensus and headaches to be settled.\r\n\r\n## Divergent non-terminal matchers\r\n\r\nMore specifically, https://github.com/rust-lang/rust/issues/86730.\r\n\r\n```rust\r\nmacro_rules! mac {\r\n    ($e:expr) => {\r\n        if $e {\r\n            true\r\n        } else {\r\n            false\r\n        }\r\n    };\r\n}\r\n\r\nfn main() {\r\n    // OK!\r\n    assert_eq!(mac!(true && let 1 = 1), true);\r\n\r\n    // ERROR! Anything starting with `let` is not considered an expression\r\n    assert_eq!(mac!(let 1 = 1 && true), true);\r\n}\r\n```\r\n\r\nTo the best of my knowledge, such error or divergence is orthogonal, does not prevent stabilization and can be tackled independently in the near future or effectively in the next Rust 2024 edition. If not, then https://github.com/c410-f3r/rust/tree/let-macro-blah contains a set of changes that will consider `let` an expression.\r\n\r\nIt is possible that none of the solutions above satisfies all applicable constraints but I personally don't know of any other plausible answers.\r\n\r\n## Alternative syntax\r\n\r\nTaking into account the usefulness of this feature and the overwhelming desire to use both now and in the past, `let PAT = EXPR` will be utilized for stabilization but it doesn't or shall create any obstacle for a **possible** future addition of `EXPR is PAT`.\r\n\r\nThe introductory snippet would then be written as the following.\r\n\r\n```rust\r\nif first_flower is Flower::Rose \r\n    && first_flower_color is Color::Red\r\n    && second_flower is Flower::Violet\r\n    && second_flower_color is Color::Blue\r\n    && pick_up_lines is &[first_pick_up_line, ..]\r\n{\r\n    println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\r\n}\r\n```\r\n\r\nJust to reinforce, this PR only unblocks a **possible** future road for `EXPR is PAT` and does emphasize what is better or what is worse.\r\n\r\n## Tests\r\n\r\n* [Verifies the drop order of let chains and ensures it won't change in the future in an unpredictable way](https://github.com/rust-lang/rust/blob/master/src/test/ui/mir/mir_let_chains_drop_order.rs)\r\n\r\n* [AST lowering does not wrap let chains in an `DropTemps` expression](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs)\r\n\r\n* [Checks pretty printing output](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.rs)\r\n\r\n* [Verifies uninitialized variables due to MIR modifications](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/chains-without-let.rs)\r\n\r\n* [A collection of statements where `let` expressions are forbidden](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs)\r\n\r\n* [All or at least most of the places where let chains are allowed](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/feature-gate.rs)\r\n\r\n* [Ensures that irrefutable lets are allowed in let chains](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs)\r\n\r\n* [issue-88498.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-88498.rs), [issue-90722.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-90722.rs), [issue-92145.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-92145.rs) and [issue-93150.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-93150.rs) were bugs found by third parties and fixed overtime.\r\n\r\n* [Indexing was triggering a ICE due to a wrongly constructed MIR graph](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/no-double-assigments.rs)\r\n\r\n* [Protects the precedence of `&&` in relation to other things](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs)\r\n\r\n* [`let_chains`, as well as `if_let_guard`, has a valid MIR graph that evaluates conditional expressions correctly](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs)\r\n\r\nMost of the infra-structure used by let chains is also used by `if` expressions in stable compiler versions since https://github.com/rust-lang/rust/pull/80357 and https://github.com/rust-lang/rust/pull/88572. As a result, no bugs were found since the integration of https://github.com/rust-lang/rust/pull/88642.\r\n\r\n## Possible future work\r\n\r\n* Let chains in match guards is implemented and working but stabilization is blocked by `if_let_guard`.\r\n\r\n* The usage of `let_chains` with `let_else` is possible but not implemented. Regardless, one attempt was introduced and closed in https://github.com/rust-lang/rust/pull/93437.\r\n\r\nThanks @Centril for creating the RFC and huge thanks (again) to @matthewjasper for all the reviews, mentoring and MIR implementations.\r\n\r\nFixes #53667",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-14T10:35:54",
            ),
            updated_at: Some(
                "2022-03-22T17:13:56",
            ),
            labels: [
                "T-lang",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
                "I-lang-nominated",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1067658436,
            fk_issue: 1586861,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* add-test-to-confirm-no-let-else-in-let-chain (https://github.com/rust-lang/rust/pull/94927#issuecomment-1068267198)\n* doc-pr (https://github.com/rust-lang/rust/pull/94927#issuecomment-1068120114)\n* irrefutable-lint (https://github.com/rust-lang/rust/pull/94927#issuecomment-1067658430)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-15T07:32:46",
            updated_at: Some(
                "2022-03-22T17:13:56",
            ),
            repository: "rust-lang/rust",
        },
    },
    FullFCP {
        fcp: FCP {
            id: 2215,
            fk_issue: 1583979,
            fk_initiator: 14314532,
            fk_initiating_comment: 1069897254,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1069897294,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 60961,
                    login: "epage",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 14314532,
                    login: "weihanglo",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1583979,
            number: 10472,
            fk_milestone: None,
            fk_user: 60961,
            fk_assignee: Some(
                43198,
            ),
            open: true,
            is_pull_request: true,
            title: "feat: Import cargo-add into cargo",
            body: "### Motivation\r\n\r\nThe reasons I'm aware of are:\r\n- Large interest, see #5586 \r\n- Make it easier to add a dependency when you don't care about the version (instead of having to find it or just using the major version if thats all you remember)\r\n- Provide a guided experience, including\r\n  - Catch or prevent errors earlier in the process\r\n  - Bring the Manifest format documentation into the terminal via `cargo add --help`\r\n  - Using `version` and `path` for `dependencies` but `path` only for `dev-dependencies` (see crate-ci/cargo-release#288 which led to killercup/cargo-edit#480)\r\n\r\n### Drawbacks\r\n\r\n1. This is another area of consideration for new RFCs, like rust-lang/rfcs#3143 (this PR supports it) or rust-lang/rfcs#2906 (implementing it will require updating `cargo-add`)\r\n\r\n2. This is a high UX feature that will draw a lot of attention (ie Issue influx)\r\n\r\ne.g.\r\n- killercup/cargo-edit#521\r\n- killercup/cargo-edit#126\r\n- killercup/cargo-edit#217\r\n\r\nWe've tried to reduce the UX influx by focusing the scope to preserving semantic information (custom sort order, comments, etc) but being opinionated on syntax (style of strings, etc)\r\n\r\n### Behavior\r\n\r\nHelp output\r\n<details>\r\n\r\n```console\r\n$ cargo run -- add --help    \r\ncargo-add                           \r\nAdd dependencies to a Cargo.toml manifest file                                                                                                     \r\n                                    \r\nUSAGE:         \r\n    cargo add [OPTIONS] <DEP>[@<VERSION>] [+<FEATURE>,...] ...\r\n    cargo add [OPTIONS] <DEP_PATH> [+<FEATURE>,...] ...\r\n                                                                                                                                                   \r\nARGS:                               \r\n    <DEP_ID>... \r\n            Reference to a package to add as a dependency\r\n                                                                         \r\n            You can reference a packages by:\r\n            - `<name>`, like `cargo add serde` (latest version will be used)\r\n            - `<name>@<version-req>`, like `cargo add serde@1` or `cargo add serde@=1.0.38`\r\n            - `<path>`, like `cargo add ./crates/parser/`\r\n                                                                         \r\n            Additionally, you can specify features for a dependency by following it with a                                                         \r\n            `+<FEATURE>`.     \r\n                                    \r\nOPTIONS:                                                                 \r\n        --no-default-features\r\n            Disable the default features\r\n                                                                         \r\n        --default-features  \r\n            Re-enable the default features           \r\n                                                                         \r\n    -F, --features <FEATURES>\r\n            Space-separated list of features to add                                                                                                \r\n             \r\n            Alternatively, you can specify features for a dependency by following it with a\r\n            `+<FEATURE>`.                                                \r\n\r\n        --optional           \r\n            Mark the dependency as optional                                                                                                        \r\n             \r\n            The package name will be exposed as feature of your crate.\r\n                                                                         \r\n    -v, --verbose\r\n            Use verbose output (-vv very verbose/build.rs output)\r\n\r\n        --no-optional\r\n            Mark the dependency as required\r\n             \r\n            The package will be removed from your features.\r\n\r\n        --color <WHEN>\r\n            Coloring: auto, always, never\r\n\r\n    -r, --rename <NAME>\r\n            Rename the dependency\r\n             \r\n            Example uses:\r\n            - Depending on multiple versions of a crate\r\n            - Depend on crates with the same name from different registries\r\n\r\n        --frozen\r\n            Require Cargo.lock and cache are up to date\r\n\r\n        --registry <NAME>\r\n            Package registry for this dependency\r\n\r\n        --locked\r\n            Require Cargo.lock is up to date\r\n\r\n        --manifest-path <PATH>\r\n            Path to Cargo.toml\r\n\r\n    -p, --package <SPEC>\r\n            Package to modify\r\n\r\n        --config <KEY=VALUE>\r\n            Override a configuration value (unstable)\r\n\r\n        --offline\r\n            Run without accessing the network\r\n\r\n    -q, --quiet                                                                                                                                    \r\n            Do not print cargo log messages                              \r\n\r\n    -Z <FLAG>     \r\n            Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details                                                                \r\n                                    \r\n        --dry-run                                                        \r\n            Don't actually write the manifest                            \r\n                                    \r\n    -h, --help                                                           \r\n            Print help information  \r\n                                    \r\nSECTION:                                                                 \r\n    -D, --dev\r\n            Add as development dependency                  \r\n                                    \r\n            Dev-dependencies are not used when compiling a package for building, but are used for                                                  \r\n            compiling tests, examples, and benchmarks.\r\n                                    \r\n            These dependencies are not propagated to other packages which depend on this package.                                                  \r\n                                    \r\n    -B, --build\r\n            Add as build dependency\r\n                                                                         \r\n            Build-dependencies are the only dependencies available for use by build scripts\r\n            (`build.rs` files).     \r\n                                    \r\n        --target <TARGET>                                                \r\n            Add as dependency to the given target platform               \r\n\r\nUNSTABLE:                                                                \r\n        --git <URI>                 \r\n            Git repository location\r\n                                                                         \r\n            Without any other information, cargo will use latest commit on the main branch.                                                        \r\n                                    \r\n        --branch <BRANCH>     \r\n            Git branch to download the crate from                        \r\n                                    \r\n        --tag <TAG>          \r\n            Git tag to download the crate from                           \r\n                                    \r\n        --rev <REV>                                                      \r\n            Git reference to download the crate from                     \r\n                 \r\n            This is the catch all, handling hashes to named references in remote repositories.                                                     \r\n\r\nEXAMPLES:\r\n  $ cargo add regex --build\r\n  $ cargo add trycmd --dev\r\n  $ cargo add ./crate/parser/\r\n  $ cargo add serde +derive serde_json\r\n```\r\n\r\n</details>\r\n\r\nExample commands\r\n```rust\r\ncargo add regex\r\ncargo add regex serde\r\ncargo add regex@1\r\ncargo add regex@~1.0\r\ncargo add ../dependency\r\n```\r\nFor an exhaustive set of examples, see [tests](https://github.com/killercup/cargo-edit/blob/merge-add/crates/cargo-add/tests/testsuite/cargo_add.rs) and associated snapshots\r\n\r\nParticular points\r\n- Effectively there are two modes\r\n  - Fill in any relevant field for one package\r\n  - Add multiple packages, erroring for fields that are package-specific (`--git`, `--rename`, `--features`, etc)\r\n- We infer if the `dependencies` table is sorted and preserve that sorting when adding a new dependency\r\n- Adding a workspace dependency\r\n  - dev-dependencies always use path\r\n  - all other dependencies use version + path\r\n- Behavior is idempotent, allowing you to run `cargo add serde +derive serde_json` safely if you already had a dependency on `serde` but without `serde_json`\r\n- When a registry dependency's version req is unspecified, we'll first reuse the version req from another dependency section in the manifest.  If that doesn't exist, we'll use the latest version in the registry as the version req\r\n\r\nFeature gates: `-Zunstable-options`\r\n- `--git` support\r\n  - Doesn't populate version in manifest\r\n  - Doesn't validate name with what is in repo\r\n  - Unsure whether to have `--tag`, `--rev`, `--branch` or to have an inline syntax like pkgids\r\n  - Unsure whether to have `--git` or to have an inline syntax that is unambiguous so it works in the multi-package case\r\n- Inline-feature addition `cargo add serde +derive serde_json`\r\n  - Intention is to allow documenting dependency groups in a single line\r\n  - Gated because we didn't have more time to collect feedback\r\n\r\n### Additional decisions\r\n\r\nAccepting the proposed `cargo-add` as-is assumes the acceptance of the following:\r\n- Add the `-F` short-hand for `--features` to all relevant cargo commands\r\n- Support `@` in pkgids in other commands where we accept `:`\r\n- Add support for `<name>@<version>` in more commands, like `cargo yank` and `cargo install`\r\n\r\n### Alternatives\r\n\r\n- Use `:` instead of `@` for versions\r\n- Flags like `--features`, `--optional`, `--no-default-features` would be position-sensitive, ie they would only apply to the crate immediate preceding them\r\n  - This removes the dual-mode nature of the command and remove the need for the `+feature` syntax (`cargo add serde -F derive serde_json`)\r\n  - There was concern over the rarity of position-sensitive flags in CLIs for adopting it here\r\n- Support a `--sort` flag to sort the dependencies (existed previously)\r\n  - To keep the scope small, we didn't want general manifest editing capabilities\r\n- `--upgrade <POLICY>` flag to choose constraint (existed previously)\r\n  - The flag was confusing as-is and we feel we should instead encourage people towards `^`\r\n- `--allow-prerelease` so a `cargo add clap` can choose among pre-releases as well\r\n  - We felt the pre-release story is too weak in cargo-generally atm for making it first class in `cargo-add`\r\n\r\n### Prior Art\r\n\r\n- *(Python)* [poetry add](https://python-poetry.org/docs/cli/#add)\r\n  - `git+` is needed for inferring git dependencies, no separate  `--git` flags\r\n  - git branch is specified via a URL fragment, instead of a `--branch`\r\n- *(Javascript)* [yarn add](https://yarnpkg.com/cli/add)\r\n  - `name@data` where data can be version, git (with fragment for branch), etc\r\n  - `-E` / `--exact`, `-T` / `--tilde`, `-C` / `--caret` to control version requirement operator instead of `--upgrade <policy>` (also controlled through `defaultSemverRangePrefix` in config)\r\n  - `--cached` for using the lock file (killercup/cargo-edit#41)\r\n  - In addition to `--dev`, it has `--prefer-dev` which will only add the dependency if it doesn't already exist in `dependencies` as well as `dev-dependencies`\r\n  - `--mode update-lockfile` will ensure the lock file gets updated as well\r\n- *(Javascript)* [pnpm-add](https://pnpm.io/cli/add)\r\n- *(Javascript)* npm doesn't have a native solution\r\n  - Specify version with `@<version>`\r\n  - Also overloads `<name>[@<version>]` with path and repo\r\n    - Supports a git host-specific protocol for shorthand, like `github:user/repo`\r\n    - Uses fragment for git ref, seems to have some kind of special semver syntax for tags?\r\n  - Only supports `--save-exact` / `-E` for operators outside of the default\r\n- *(Go)* [go get](https://go.dev/ref/mod#go-get)\r\n  - Specify version with `@<version>`\r\n  - Remove dependency with `@none`\r\n- *(Haskell)* stack doesn't seem to have a native solution\r\n- *(Julia)* [pkg Add](https://docs.julialang.org/en/v1/stdlib/Pkg/)\r\n- *(Ruby)* [bundle add](https://bundler.io/v2.2/man/bundle-add.1.html)\r\n  - Uses `--version` / `-v` instead of `--vers` (we use `--vers` because of `--version` / `-V`)\r\n  - `--source` instead of `path` (`path` correlates to manifest field)\r\n  - Uses `--git` / `--branch` like `cargo-add`\r\n- *(Dart)* [pub add](https://dart.dev/tools/pub/cmd/pub-add)\r\n  - Uses `--git-url` instead of `--git`\r\n  - Uses `--git-ref` instead of `--branch`, `--tag`, `--rev`\r\n\r\n### Future Possibilities\r\n\r\n- Update lock file accordingly\r\n- Exploring the idea of a [`--local` flag](https://github.com/killercup/cargo-edit/issues/590)\r\n- Take the MSRV into account when automatically creating version req (https://github.com/killercup/cargo-edit/issues/587)\r\n- Integrate rustsec to report advisories on new dependencies (https://github.com/killercup/cargo-edit/issues/512)\r\n- Integrate with licensing to report license, block add, etc (e.g. https://github.com/killercup/cargo-edit/issues/386)\r\n- Pull version from lock file (https://github.com/killercup/cargo-edit/issues/41)\r\n- Exploring if any vendoring integration would be beneficial (currently errors)\r\n- Upstream `cargo-rm`, `cargo-upgrade`, and `cargo-set-version` (in that order of priority)\r\n- Update crates.io with `cargo add` snippets in addition to or replacing the manifest snippets\r\n\r\nFor more, see https://github.com/killercup/cargo-edit/issues?q=is%3Aissue+is%3Aopen+label%3Acargo-add\r\n\r\n### How should we test and review this PR?\r\n\r\nThis is intentionally broken up into several commits to help reviewing\r\n1. Import of production code from cargo-edit's `merge-add` branch, with only changes made to let it compile (e.g. fixing up of `use` statements).\r\n2. Import of test code / snapshots.  The only changes outside of the import were to add the `snapbox` dev-dependency and to `mod cargo_add` into the testsuite\r\n3. This extends the work in #10425 so I could add back in the color highlighting I had to remove as part of switching `cargo-add` from direct termcolor calls to calling into `Shell`\r\n\r\nStructure-wise, this is similar to other commands\r\n- `bin` only defines a CLI and adapts it to an `AddOptions`\r\n- `ops` contains a focused API with everything buried under it\r\n\r\nThe \"op\" contains a directory, instead of just a file, because of the amount of content.  Currently, all editing code is contained in there.  Most of this will be broken out and reused when other `cargo-edit` commands are added but holding off on that for now to separate out the editing API discussions from just getting the command in.\r\n\r\nWithin the github UI, I'd recommend looking at individual commits (and the `merge-add` branch if interested), skipping commit 2.  Commit 2 would be easier to browse locally.\r\n\r\n`cargo-add` is mostly covered by end-to-end tests written using `snapbox`, including error cases.  \r\n\r\nThere is additional cleanup that would ideally happen that was excluded intentionally from this PR to keep it better scoped, including\r\n- Consolidating environment variables for end-to-end tests of `cargo`\r\n- Pulling out the editing API, as previously mentioned\r\n  - Where the editing API should live (`cargo::edit`?)\r\n  - Any more specific naming of types to reduce clashes (e.g. `Dependency` or `Manifest` being fairly generic).\r\n- Possibly sharing `SourceId` creation between `cargo install` and `cargo edit`\r\n- Explore using `snapbox` in more of cargo's tests\r\n\r\nImplementation justifications:\r\n- `dunce` and `pathdiff` dependencies: needed for taking paths relative to the user and make them relative to the manifest being edited\r\n- `indexmap` dependency (already a transitive dependency): Useful for preserving uniqueness while preserving order, like with feature values\r\n- `snapbox` dev-dependency: Originally it was used to make it easy to update tests as the UX changed in prep for merging but it had the added benefit of making some UX bugs easier to notice so they got fixed.  Overall, I'd like to see it become the cargo-agnostic version of `cargo-test-support` so there is a larger impact when improvements are made\r\n- `parse_feature` function: `CliFeatures` forces items through a `BTreeSet`, losing the users specified order which we wanted to preserve.\r\n\r\n### Additional Information\r\n\r\nSee also [the internals thread](https://internals.rust-lang.org/t/feedback-on-cargo-add-before-its-merged/16024).\r\n\r\nFixes #5586 ",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-10T20:05:26",
            ),
            updated_at: Some(
                "2022-03-18T11:22:33",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-review",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 1069897294,
            fk_issue: 1583979,
            fk_user: 20760818,
            body: "Team member @weihanglo has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Eh2406\n* [ ] @ehuss\n* [ ] @epage\n* [x] @joshtriplett\n* [x] @weihanglo\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-17T02:25:15",
            updated_at: Some(
                "2022-03-18T11:22:32",
            ),
            repository: "rust-lang/cargo",
        },
    },
]
fcp_map: {
    "rust-lang/rust:87074:Tracking Issue for RFC 3128: I/O Safety": FullFCP {
        fcp: FCP {
            id: 2222,
            fk_issue: 1356930,
            fk_initiator: 783247,
            fk_initiating_comment: 1075151992,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075152025,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1356930,
            number: 87074,
            fk_milestone: None,
            fk_user: 162737,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for RFC 3128: I/O Safety",
            body: "Feature gate: `#![feature(io_safety)]`\r\n\r\nThis is a tracking issue for [RFC 3128: I/O Safety](https://github.com/rust-lang/rfcs/pull/3128).\r\n\r\nRaw OS handles such as `RawFd` and `RawHandle` have hazards similar to raw pointers; they may be bogus or may dangle, leading to broken encapsulation boundaries and code whose behavior is impossible to bound in general.\r\n\r\nIntroduce a concept of *I/O safety*, and introduce a new set of types and traits, led by `OwnedFd` and `BorrowedFd`, to support it.\r\n\r\n### Public API\r\n\r\nThe public API on UNIX platforms consists of the types `OwnedFd` and `BorrowedFd`, the trait `AsFd`, and implementations of `AsFd`, `Into<OwnedFd>`, and `From<OwnedFd>` for various types (such as files and sockets).\r\n\r\nThe public API on Windows platforms consists of two sets of parallel types and traits and impls for `OwnedHandle`, `OwnedSocket`, `BorrowedHandle`, `BorrowedSocket`, etc.\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation (based on @sunfishcode's existing work outside of std)\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] This RFC doesn't define a formal model for raw handle ownership and lifetimes. The rules for raw handles in this RFC are vague about their identity. What does it mean for a resource lifetime to be associated with a handle if the handle is just an integer type? Do all integer types with the same value share that association?\r\n- [ ] The Rust [reference](https://doc.rust-lang.org/reference/behavior-considered-undefined.html) defines undefined behavior for memory in terms of [LLVM's pointer aliasing rules](http://llvm.org/docs/LangRef.html#pointer-aliasing-rules); I/O could conceivably need a similar concept of handle aliasing rules. This doesn't seem necessary for present practical needs, but it could be explored in the future.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-07-12T03:08:11",
            ),
            updated_at: Some(
                "2022-03-22T13:02:42",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "A-io",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1075152025,
            fk_issue: 1356930,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T13:02:40",
            updated_at: Some(
                "2022-03-22T13:02:42",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/reference:1163:Clarify guarantees provided by repr(packed)": FullFCP {
        fcp: FCP {
            id: 2225,
            fk_issue: 1554600,
            fk_initiator: 155238,
            fk_initiating_comment: 1075521037,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075521903,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1554600,
            number: 1163,
            fk_milestone: None,
            fk_user: 1046063,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "Clarify guarantees provided by repr(packed)",
            body: "Clarify that `repr(packed)` minimizes inter-field padding and, in the special case of `repr(packed(1))`/`repr(packed)`, guarantees no inter-field padding.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-09T14:32:29",
            ),
            updated_at: Some(
                "2022-03-22T20:03:06",
            ),
            labels: [
                "I-lang-nominated",
                "T-lang",
            ],
            repository: "rust-lang/reference",
        },
        status_comment: StatusComment {
            id: 1075521903,
            fk_issue: 1554600,
            fk_user: 20760818,
            body: "Team member @nikomatsakis has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @cramertj\n* [ ] @joshtriplett\n* [x] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T19:01:41",
            updated_at: Some(
                "2022-03-22T19:01:42",
            ),
            repository: "rust-lang/reference",
        },
    },
    "rust-lang/rust:93628:Stabilize `let else`": FullFCP {
        fcp: FCP {
            id: 2165,
            fk_issue: 1543435,
            fk_initiator: 162737,
            fk_initiating_comment: 1029383577,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1029383585,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1543435,
            number: 93628,
            fk_milestone: None,
            fk_user: 8872119,
            fk_assignee: Some(
                31162821,
            ),
            open: true,
            is_pull_request: true,
            title: "Stabilize `let else`",
            body: ":tada:  **Stabilizes the `let else` feature, added by [RFC 3137](https://github.com/rust-lang/rfcs/pull/3137).** :tada: \r\n\r\nReference PR: https://github.com/rust-lang/reference/pull/1156\r\n\r\nFiling a draft as it is still subject to FCP approval.\r\n\r\ncloses #87335 (`let else` tracking issue)\r\n\r\nFCP: https://github.com/rust-lang/rust/pull/93628#issuecomment-1029383585\r\n\r\n----------\r\n\r\n## Stabilization report\r\n\r\n### Summary\r\n\r\nThe feature allows refutable patterns in `let` statements if the expression is\r\nfollowed by a diverging `else`:\r\n\r\n```Rust\r\nfn get_count_item(s: &str) -> (u64, &str) {\r\n    let mut it = s.split(' ');\r\n    let (Some(count_str), Some(item)) = (it.next(), it.next()) else {\r\n        panic!(\"Can't segment count item pair: '{s}'\");\r\n    };\r\n    let Ok(count) = u64::from_str(count_str) else {\r\n        panic!(\"Can't parse integer: '{count_str}'\");\r\n    };\r\n    (count, item)\r\n}\r\nassert_eq!(get_count_item(\"3 chairs\"), (3, \"chairs\"));\r\n```\r\n\r\n### Differences from the RFC / Desugaring\r\n\r\nOutside of desugaring I'm not aware of any differences between the implementation and the RFC. The chosen desugaring has been changed from the RFC's [original](https://rust-lang.github.io/rfcs/3137-let-else.html#reference-level-explanations). You can read a detailed discussion of the implementation history of it in @cormacrelf 's [summary](https://github.com/rust-lang/rust/pull/93628#issuecomment-1041143670) in this thread, as well as the [followup](https://github.com/rust-lang/rust/pull/93628#issuecomment-1046598419).\r\n\r\n### Test cases\r\n\r\nAdded by df9a2e0687895731e12f4a2651e8d70acd08872d:\r\n\r\n* [`ui/pattern/usefulness/top-level-alternation.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/pattern/usefulness/top-level-alternation.rs) to ensure the unreachable pattern lint visits patterns inside `let else`.\r\n\r\nAdded by 5b95df4bdc330f34213812ad65cae86ced90d80c:\r\n\r\n* [`ui/let-else/let-else-bool-binop-init.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-bool-binop-init.rs) to ensure that no lazy boolean expressions (using `&&` or `||`) are allowed in the expression, as the RFC mandates.\r\n* [`ui/let-else/let-else-brace-before-else.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-brace-before-else.rs) to ensure that no `}` directly preceding the `else` is allowed in the expression, as the RFC mandates.\r\n* [`ui/let-else/let-else-check.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-check.rs) to ensure that `#[allow(...)]` attributes added to the entire `let` statement apply for the `else` block.\r\n* [`ui/let-else/let-else-irrefutable.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-irrefutable.rs) to ensure that the `irrefutable_let_patterns` lint fires.\r\n* [`ui/let-else/let-else-missing-semicolon.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-missing-semicolon.rs) to ensure the presence of semicolons at the end of the `let` statement.\r\n* [`ui/let-else/let-else-non-diverging.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-non-diverging.rs) to ensure the `else` block diverges.\r\n* [`ui/let-else/let-else-run-pass.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-run-pass.rs) to ensure the feature works in some simple test case settings.\r\n* [`ui/let-else/let-else-scope.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-scope.rs) to ensure the bindings created by the outer `let` expression are not available in the `else` block of it.\r\n\r\nAdded by bf7c32a4477a76bfd18fdcd8f45a939cbed82d34:\r\n\r\n* [`ui/let-else/issue-89960.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/issue-89960.rs) as a regression test for the ICE-on-error bug #89960 . Later in 102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0 this got removed in favour of more comprehensive tests.\r\n\r\nAdded by 856541963ce95ef4f7d4a81784bb5002ccf63c93:\r\n\r\n* [`ui/let-else/let-else-if.rs`](https://github.com/rust-lang/rust/blob/1.58.1/src/test/ui/let-else/let-else-if.rs) to test for the improved error message that points out that `let else if` is not possible.\r\n\r\nAdded by 9b45713b6c1775f0103a1ebee6ab7c6d9b781a21:\r\n\r\n* [`ui/let-else/let-else-allow-unused.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-allow-unused.rs) as a regression test for #89807, to ensure that `#[allow(...)]` attributes added to the entire `let` statement apply for bindings created by the `let else` pattern.\r\n\r\nAdded by 61bcd8d3075471b3867428788c49f54fffe53f52:\r\n\r\n* [`ui/let-else/let-else-non-copy.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-non-copy.rs) to ensure that a copy is performed out of non-copy wrapper types. This mirrors `if let` behaviour. The test case bases on rustc internal changes originally meant for #89933 but then removed from the PR due to the error prior to the improvements of #89841.\r\n* [`ui/let-else/let-else-source-expr-nomove-pass.rs `](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-source-expr-nomove-pass.rs) to ensure that while there is a move of the binding in the successful case, the `else` case can still access the non-matching value. This mirrors `if let` behaviour.\r\n\r\nAdded by 102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0:\r\n\r\n* [`ui/let-else/let-else-ref-bindings.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-ref-bindings.rs) and [`ui/let-else/let-else-ref-bindings-pass.rs `](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-ref-bindings-pass.rs) to check `ref` and `ref mut` keywords in the pattern work correctly and error when needed.\r\n\r\nAdded by 2715c5f984fda7faa156d1c9cf91aa4934f0e00f:\r\n\r\n* Match ergonomic tests adapted from the `rfc2005` test suite.\r\n\r\nAdded by fec8a507a27de1b08a0b95592dc8ec93bf0a321a:\r\n\r\n* [`ui/let-else/let-else-deref-coercion-annotated.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-deref-coercion-annotated.rs) and [`ui/let-else/let-else-deref-coercion.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-deref-coercion.rs) to check deref coercions.\r\n\r\n#### Added since this stabilization report was originally written (2022-02-09)\r\n\r\nAdded by 76ea56667703ac06689ff1d6fba5d170fa7392a7:\r\n\r\n* [`ui/let-else/let-else-destructuring.rs`](https://github.com/rust-lang/rust/blob/76ea56667703ac06689ff1d6fba5d170fa7392a7/src/test/ui/let-else/let-else-destructuring.rs) to give a nice error message if an user tries to do an assignment with a (possibly refutable) pattern and an `else` block, like asked for in #93995.\r\n\r\nAdded by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da:\r\n\r\n* [`ui/let-else/let-else-allow-in-expr.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-allow-in-expr.rs) to test whether `#[allow(unused_variables)]` works in the expr, as well as its non presence, as well as putting it on the entire `let else` *affects* the expr, too. This was adding a missing test as pointed out by the stabilization report.\r\n* Expansion of `ui/let-else/let-else-allow-unused.rs` and `ui/let-else/let-else-check.rs` to ensure that non-presence of `#[allow(unused)]` does issue the unused lint. This was adding a missing test case as pointed out by the stabilization report.\r\n\r\nAdded by 5bd71063b3810d977aa376d1e6dd7cec359330cc:\r\n\r\n* [`ui/let-else/let-else-slicing-error.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui/let-else/let-else-slicing-error.rs), a regression test for #92069, which got fixed without addition of a regression test. This resolves a missing test as pointed out by the stabilization report.\r\n\r\nAdded by this PR:\r\n\r\n* `ui/let-else/let-else.rs`, a simple run-pass check, similar to `ui/let-else/let-else-run-pass.rs`.\r\n\r\nAdded by #94012:\r\n\r\n* TBD, the PR is not yet merged.\r\n\r\n### Things not currently tested\r\n\r\n* ~~The `#[allow(...)]` tests check whether allow works, but they don't check whether the non-presence of allow causes a lint to fire.~~ → *test added by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da*\r\n* ~~There is no `#[allow(...)]` test for the expression, as there are tests for the pattern and the else block.~~ → *test added by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da*\r\n* ~~`let-else-brace-before-else.rs` forbids the `let ... = {} else {}` pattern and there is a rustfix to obtain `let ... = ({}) else {}`. I'm not sure whether the `.fixed` files are checked by the tooling that they compile. But if there is no such check, it would be neat to make sure that `let ... = ({}) else {}` compiles.~~ → *test added by e7730dcb7eb29a10ee73f269f4dc6e9d606db0da*\r\n* ~~#92069 got closed as fixed, but no regression test was added. Not sure it's worth to add one.~~ → *test added by 5bd71063b3810d977aa376d1e6dd7cec359330cc*\r\n\r\nDon't think these missing tests should block stabilization, they are rather details. But feel free to disagree.\r\n\r\n### Possible future work / Refutable destructuring assignments\r\n\r\n[RFC 2909](https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html) specifies destructuring assignment, allowing statements like `FooBar { a, b, c } = foo();`.\r\nAs it was stabilized, destructuring assignment only allows *irrefutable* patterns, which before the advent of `let else` were the only patterns that `let` supported.\r\nSo the combination of `let else` and destructuring assignments gives reason to think about extensions of the destructuring assignments feature that allow refutable patterns, discussed in #93995.\r\n\r\nA naive mapping of `let else` to destructuring assignments in the form of `Some(v) = foo() else { ... };` might not be the ideal way. `let else` needs a diverging `else` clause as it introduces new bindings, while assignments have a default behaviour to fall back to if the pattern does not match, in the form of not performing the assignment. Thus, there is no good case to require divergence, or even an `else` clause at all, beyond the need for having *some* introducer syntax so that it is clear to readers that the assignment is not a given (enums and structs look similar). There are better candidates for introducer syntax however than an empty `else {}` clause, like `maybe` which could be added as a keyword on an edition boundary:\r\n\r\n```Rust\r\nlet mut v = 0;\r\nmaybe Some(v) = foo(&v);\r\nmaybe Some(v) = foo(&v) else { bar() };\r\n```\r\n\r\nFurther design discussion is left to an RFC, or the linked issue.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-03T19:28:27",
            ),
            updated_at: Some(
                "2022-03-22T17:12:48",
            ),
            labels: [
                "T-rustdoc",
                "T-lang",
                "relnotes",
                "S-waiting-on-author",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "S-waiting-on-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1029383585,
            fk_issue: 1543435,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [x] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* need-consistency-rvalue-temporary-rules-between-let-and-let-else (https://github.com/rust-lang/rust/pull/93628#issuecomment-1055738523)\n* ~~not-while-rustfmt-breaks-on-it~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1032936704\n* ~~semicolon~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1059799661\n* ~~stabilization-report~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1033846359\n* ~~summarize-concerns~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1056785904\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-03T20:43:04",
            updated_at: Some(
                "2022-03-22T17:12:48",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:94786:Document NonZeroXxx layout guarantees": FullFCP {
        fcp: FCP {
            id: 2203,
            fk_issue: 1582911,
            fk_initiator: 162737,
            fk_initiating_comment: 1064599945,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1064599953,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1582911,
            number: 94786,
            fk_milestone: None,
            fk_user: 1046063,
            fk_assignee: Some(
                162737,
            ),
            open: true,
            is_pull_request: true,
            title: "Document NonZeroXxx layout guarantees",
            body: "Document that `NonZeroXxx` has the same layout and bit validity as `Xxx` with the exception of `0`.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-09T21:53:25",
            ),
            updated_at: Some(
                "2022-03-16T21:05:45",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1064599953,
            fk_issue: 1582911,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* implications (https://github.com/rust-lang/rust/pull/94786#issuecomment-1065261648)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-10T23:09:24",
            updated_at: Some(
                "2022-03-16T21:05:45",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:94640:Partially stabilize `(const_)slice_ptr_len` feature by stabilizing `NonNull::len`": FullFCP {
        fcp: FCP {
            id: 2206,
            fk_issue: 1578761,
            fk_initiator: 783247,
            fk_initiating_comment: 1065939865,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065939867,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1578761,
            number: 94640,
            fk_milestone: None,
            fk_user: 81013316,
            fk_assignee: Some(
                1993852,
            ),
            open: true,
            is_pull_request: true,
            title: "Partially stabilize `(const_)slice_ptr_len` feature by stabilizing `NonNull::len`",
            body: "This PR partially stabilizes features `const_slice_ptr_len` and `slice_ptr_len` by only stabilizing `NonNull::len`. This partial stabilization is tracked under features `slice_ptr_len_nonnull` and `const_slice_ptr_len_nonnull`, for which this PR can serve as the tracking issue.\r\n\r\nTo summarize the discussion from #71146 leading up to this partial stabilization request:\r\n\r\nIt's currently a bit footgunny to obtain the length of a raw slice pointer, stabilization of `NonNull:len` will help with removing these footguns. Some example footguns are:\r\n\r\n```rust\r\n/// # Safety\r\n/// The caller must ensure that `ptr`:\r\n/// 1. does not point to memory that was previously allocated but is now deallocated;\r\n/// 2. is within the bounds of a single allocated object;\r\n/// 3. does not to point to a slice for which the length exceeds `isize::MAX` bytes;\r\n/// 4. points to a properly aligned address;\r\n/// 5. does not point to uninitialized memory;\r\n/// 6. does not point to a mutably borrowed memory location.\r\npub unsafe fn ptr_len<T>(ptr: core::ptr::NonNull<[T]>) -> usize {\r\n   (&*ptr.as_ptr()).len()\r\n}\r\n```\r\n\r\nA slightly less complicated version (but still more complicated than it needs to be):\r\n\r\n```rust\r\n/// # Safety\r\n/// The caller must ensure that the start of `ptr`:\r\n/// 1. does not point to memory that was previously allocated but is now deallocated;\r\n/// 2. must be within the bounds of a single allocated object.\r\npub unsafe fn ptr_len<T>(ptr: NonNull<[T]>) -> usize {\r\n   (&*(ptr.as_ptr() as *const [()])).len()\r\n}\r\n```\r\n\r\nThis PR does not stabilize `<*const [T]>::len` and  `<*mut [T]>::len` because the tracking issue #71146 list a potential blocker for these methods, but this blocker [does not apply](https://github.com/rust-lang/rust/issues/71146#issuecomment-808735714) to `NonNull::len`.\r\n\r\nWe should probably also ping the [Constant Evaluation WG](https://github.com/rust-lang/const-eval) since this PR includes a `#[rustc_allow_const_fn_unstable(const_slice_ptr_len)]`. My instinct here is that this will probably be okay because the pointer is not actually dereferenced and `len()` does not touch the address component of the pointer, but would be best to double check :)\r\n\r\nOne potential down-side was raised that stabilizing `NonNull::len` could lead to encouragement of coding patterns like:\r\n\r\n```\r\npub fn ptr_len<T>(ptr: *mut [T]) -> usize {\r\n   NonNull::new(ptr).unwrap().len()\r\n}\r\n```\r\n\r\nwhich unnecessarily assert non-nullness. However, these are much less of a footgun than the above examples and this should be resolved when `slice_ptr_len` fully stabilizes eventually.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-05T11:09:04",
            ),
            updated_at: Some(
                "2022-03-18T17:21:27",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "S-waiting-on-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065939867,
            fk_issue: 1578761,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-12T18:44:19",
            updated_at: Some(
                "2022-03-18T17:20:57",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rfcs:3191:New Rust attribute to support embedding debugger visualizers": FullFCP {
        fcp: FCP {
            id: 2202,
            fk_issue: 1458601,
            fk_initiator: 831192,
            fk_initiating_comment: 1064452035,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1064452047,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 77424,
                    login: "eddyb",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 332036,
                    login: "oli-obk",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 679122,
                    login: "nagisa",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 831192,
                    login: "wesleywiser",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1295100,
                    login: "davidtwco",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1408859,
                    login: "Aaron1011",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1606434,
                    login: "estebank",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1822483,
                    login: "cjgillot",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1825894,
                    login: "michaelwoerister",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5751617,
                    login: "petrochenkov",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 20113453,
                    login: "matthewjasper",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 29864074,
                    login: "lcnr",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1458601,
            number: 3191,
            fk_milestone: None,
            fk_user: 91507758,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "New Rust attribute to support embedding debugger visualizers",
            body: "This RFC adds support for a new Rust attribute that will embed a debugger visualizer into a PDB/ELF.\r\n\r\n[Internals thread](https://internals.rust-lang.org/t/pre-rfc-natvis-support-for-rust/15477)\r\n\r\n[Rendered](https://github.com/ridwanabdillahi/rfcs/blob/natvis/text/0000-debugger-visualizer.md)",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-11-03T21:00:27",
            ),
            updated_at: Some(
                "2022-03-22T18:56:49",
            ),
            labels: [
                "T-lang",
                "T-compiler",
                "proposed-final-comment-period",
                "disposition-merge",
            ],
            repository: "rust-lang/rfcs",
        },
        status_comment: StatusComment {
            id: 1064452047,
            fk_issue: 1458601,
            fk_user: 20760818,
            body: "Team member @wesleywiser has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Aaron1011\n* [x] @cjgillot\n* [x] @cramertj\n* [x] @davidtwco\n* [x] @eddyb\n* [x] @estebank\n* [x] @joshtriplett\n* [ ] @lcnr\n* [ ] @matthewjasper\n* [x] @michaelwoerister\n* [ ] @nagisa\n* [x] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [x] @pnkfelix\n* [x] @scottmcm\n* [x] @wesleywiser\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-10T20:00:38",
            updated_at: Some(
                "2022-03-22T18:56:49",
            ),
            repository: "rust-lang/rfcs",
        },
    },
    "rust-lang/rust:93203:Tracking Issue for scoped threads": FullFCP {
        fcp: FCP {
            id: 2223,
            fk_issue: 1531088,
            fk_initiator: 783247,
            fk_initiating_comment: 1075284785,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075284811,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1531088,
            number: 93203,
            fk_milestone: None,
            fk_user: 783247,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for scoped threads",
            body: "Feature gate: `#![feature(scoped_threads)]`\r\n\r\nThis is a tracking issue for scoped threads.\r\n\r\nDocumentation: https://doc.rust-lang.org/nightly/std/thread/fn.scope.html\r\n\r\nRFC: https://rust-lang.github.io/rfcs/3151-scoped-threads.html\r\n\r\n### Example usage\r\n\r\n```rust\r\nlet local_var = vec![1, 2, 3];\r\n\r\nthread::scope(|s| {\r\n    s.spawn(|| println!(\"borrowed from thread #1: {:?}\", local_var));\r\n    s.spawn(|| println!(\"borrowed from thread #2: {:?}\", local_var));\r\n    println!(\"borrowed from the main thread: {:?}\", local_var);\r\n});\r\n```\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\n// std::thread\r\n\r\npub struct Scope<'scope, 'env: 'scope> { ... }\r\n\r\npub struct ScopedJoinHandle<'scope, T> { ... }\r\n\r\npub fn scope<'env, F, T>(f: F) -> T\r\nwhere\r\n    F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T;\r\n\r\nimpl Builder {\r\n    pub fn spawn_scoped<'scope, 'env, F, T>(\r\n        self,\r\n        scope: &'scope Scope<'env>,\r\n        f: F,\r\n    ) -> io::Result<ScopedJoinHandle<'scope, T>>\r\n    where\r\n        F: FnOnce() -> T + Send + 'scope,\r\n        T: Send + 'scope;\r\n}\r\n\r\nimpl<'scope, 'env> Scope<'scope, 'env> {\r\n    pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\r\n    where\r\n        F: FnOnce() -> T + Send + 'scope,\r\n        T: Send + 'scope;\r\n}\r\n\r\nimpl<'scope, T> ScopedJoinHandle<'scope, T> {\r\n    pub fn join(self) -> Result<T>;\r\n    pub fn thread(&self) -> &Thread;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] RFC attempt 1: https://github.com/rust-lang/rfcs/pull/2647\r\n- [x] RFC attempt 2: https://github.com/rust-lang/rfcs/pull/3151\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/92555\r\n- [x] Change signatures a bit to remove the argument to the spawn closures: https://github.com/rust-lang/rust/pull/94559\r\n- [x] Fix soundness issue in implementation: https://github.com/rust-lang/rust/pull/94644\r\n- [x] Document lifetimes: https://github.com/rust-lang/rust/pull/94763\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- [x] Can we omit the `&Scope` argument to the functions given to `.spawn()`? That is, `scope.spawn(|| ..)` rather than `scope.spawn(|_| ..)`.\r\n  - It's already possible by forcing the user to use `move || ..` instead, but that's not great. Maybe the language could be subtly changed to capture references or certain `Copy` types by value rather than by reference(-to-reference).\r\n  - See also [this comment](https://github.com/rust-lang/rfcs/pull/3151#issuecomment-883251161) and the collapsed section in [the comment below](https://github.com/rust-lang/rust/issues/93203#issuecomment-1019293467).\r\n  - Mostly answered in [this comment](https://github.com/rust-lang/rust/issues/93203#issuecomment-1040720703).\r\n  - Working idea in [this comment](https://github.com/rust-lang/rust/issues/93203#issuecomment-1040798286).\r\n  - Implementation in https://github.com/rust-lang/rust/pull/94559\r\n- [x] How to document the `'env` and `'scope` lifetimes clearly without scaring people away.\r\n  - https://github.com/rust-lang/rust/pull/94763\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-22T14:52:22",
            ),
            updated_at: Some(
                "2022-03-22T20:19:33",
            ),
            labels: [
                "A-runtime",
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1075284811,
            fk_issue: 1531088,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T14:54:10",
            updated_at: Some(
                "2022-03-22T15:08:16",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:90291:Loosen the bound on the Debug implementation of Weak.": FullFCP {
        fcp: FCP {
            id: 2082,
            fk_issue: 1450565,
            fk_initiator: 162737,
            fk_initiating_comment: 955599587,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 955599591,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1450565,
            number: 90291,
            fk_milestone: None,
            fk_user: 2838446,
            fk_assignee: Some(
                103023,
            ),
            open: true,
            is_pull_request: true,
            title: "Loosen the bound on the Debug implementation of Weak.",
            body: "Both `rc::Weak<T>` and `sync::Weak<T>` currently require `T: Debug` in their own `Debug` implementations, but they don't currently use it;  they only ever print a fixed string.\r\n\r\nA general implementation of Debug for Weak that actually attempts to upgrade and rely on the contents is unlikely in the future because it may have unbounded recursion in the presence of reference cycles, which Weak is commonly used in.  (This was the justification for why the current implementation [was implemented the way it is](https://github.com/rust-lang/rust/pull/19388/commits/f0976e2cf3f6b0027f118b791e0888b29fbb41a7)).\r\n\r\nWhen I brought it up [on the forum](https://internals.rust-lang.org/t/could-the-bound-on-weak-debug-be-relaxed/15504), it was suggested that, even if an implementation is specialized in the future that relies on the data stored within the Weak, it would likely rely on specialization anyway, and could therefore easily specialize on the Debug bound as well.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-10-26T01:51:05",
            ),
            updated_at: Some(
                "2022-03-16T14:34:33",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 955599591,
            fk_issue: 1450565,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* better-use-case (https://github.com/rust-lang/rust/pull/90291#issuecomment-956196380)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-10-30T22:04:41",
            updated_at: Some(
                "2022-03-09T17:38:17",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:91789:Tracking Issue for try_reserve method on more containers": FullFCP {
        fcp: FCP {
            id: 2160,
            fk_issue: 1492330,
            fk_initiator: 1993852,
            fk_initiating_comment: 1026130074,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1026130086,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1492330,
            number: 91789,
            fk_milestone: None,
            fk_user: 9161438,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for try_reserve method on more containers",
            body: "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! 📜 Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is another tracking issue for the try_reserve part of the RFC \"fallible collection allocation\" (rust-lang/rfcs#2116).\r\nThe feature gate for the issue is `#![feature(try_reserve_2)]`.\r\n\r\nThe feature is a follow-up to #48043. Since `try_reserve` was stabilized in 1.57.0, we may need a new feature gate for further `try_reserve` implementation on more containers.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement `try_reserve` and `try_reserve_exact` on `BinaryHeap` #91529 \r\n- [x] Implement `try_reserve` and `try_reserve_exact` on `PathBuf` #92513\r\n- [x] Implement `try_reserve` and `try_reserve_exact` on `OsString` #92338 \r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\nIf any containers were missing, please comment in the issue, and I will add it to the list.\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n\r\n#91529 \r\n#92338 \r\n#92513\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-12-11T14:40:29",
            ),
            updated_at: Some(
                "2022-03-13T17:47:25",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1026130086,
            fk_issue: 1492330,
            fk_user: 20760818,
            body: "Team member @yaahc has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* do we need better docs about what the argument value means (not bytes) (https://github.com/rust-lang/rust/issues/91789#issuecomment-1027257918)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-01-31T19:28:08",
            updated_at: Some(
                "2022-02-16T21:01:10",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:91759:rustdoc: \"Namespace\" user-written Markdown headings": FullFCP {
        fcp: FCP {
            id: 2119,
            fk_issue: 1491608,
            fk_initiator: 37223377,
            fk_initiating_comment: 996996449,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 996996461,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 81079,
                    login: "Nemo157",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 220205,
                    login: "jsha",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1617736,
                    login: "Manishearth",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 3050060,
                    login: "GuillaumeGomez",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 7189418,
                    login: "ollie27",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 13342132,
                    login: "CraftSpider",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 23638587,
                    login: "jyn514",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 37223377,
                    login: "camelid",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1491608,
            number: 91759,
            fk_milestone: None,
            fk_user: 37223377,
            fk_assignee: Some(
                3050060,
            ),
            open: true,
            is_pull_request: false,
            title: "rustdoc: \"Namespace\" user-written Markdown headings",
            body: "Tracking issue for @jsha's idea mentioned [here](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264504935). What follows is @jsha's summary of the idea:\r\n\r\nWhen markdown like `# Examples` is processed, it usually turns into something like `<a href=\"#examples\" id=\"examples\">`. This is useful so you can click on the heading and get a link that will take someone else to that precise part of the docs.\r\n\r\nSince the markdown in rustdoc is user-generated, those anchor ids may conflict with Rustdoc's own anchor ids. They may also conflict with other markdown sections within the same doc page. For instance, see:\r\n\r\nhttps://doc.rust-lang.org/nightly/std/string/struct.String.html#examples\r\nhttps://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-1\r\nhttps://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-2\r\n\r\nRight now we disambiguate these ids by added a number at the end. However, it would be better to disambiguate them by namespacing. Specifically, each time we render markdown we should provide a \"prefix\", and all IDs in the generated HTML should start with that prefix. In general a convenient and sensible choice for this prefix would be the id of the immediately preceding heading. So the examples linked above might become `#top.examples`, `#method.new.examples`, and `#method.from_utf8.examples`.\r\n\r\nThis has three advantages:\r\n - It systematically removes most of the cases of id conflict.\r\n - It makes anchor links more meaningful when someone reads the URL.\r\n - It makes anchor links stable across revisions.\r\n\r\nThis is a 99% solution, not a 100% one. Users can author HTML directly in their markdown, for instance `<div id=\"foo\">`. But we are okay with letting the conflicts happen in those rare cases.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-12-10T21:28:12",
            ),
            updated_at: Some(
                "2022-01-23T03:43:18",
            ),
            labels: [
                "T-rustdoc",
                "C-enhancement",
                "proposed-final-comment-period",
                "disposition-merge",
                "A-rustdoc-ui",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 996996461,
            fk_issue: 1491608,
            fk_user: 20760818,
            body: "Team member @camelid has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @CraftSpider\n* [x] @GuillaumeGomez\n* [x] @Manishearth\n* [x] @Nemo157\n* [x] @camelid\n* [x] @jsha\n* [ ] @jyn514\n* [ ] @ollie27\n\nConcerns:\n\n* ~~anchor formatting~~ resolved by https://github.com/rust-lang/rust/issues/91759#issuecomment-1012496534\n* ~~breakage~~ resolved by https://github.com/rust-lang/rust/issues/91759#issuecomment-1012548149\n* ~~impls~~ resolved by https://github.com/rust-lang/rust/issues/91759#issuecomment-997085268\n* simplify (https://github.com/rust-lang/rust/issues/91759#issuecomment-1019004268)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-12-17T19:56:24",
            updated_at: Some(
                "2022-01-22T01:19:10",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:88581:Tracking Issue for `int_roundings`": FullFCP {
        fcp: FCP {
            id: 2188,
            fk_issue: 1401981,
            fk_initiator: 162737,
            fk_initiating_comment: 1054642118,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1054642132,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1401981,
            number: 88581,
            fk_milestone: None,
            fk_user: 3161395,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for `int_roundings`",
            body: "Feature gate: `#![feature(int_roundings)]`\r\n\r\nThis is a tracking issue for the `div_floor`, `div_ceil`, `next_multiple_of`, and `checked_multiple_of` methods on all integer types.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl {integer} {\r\n    pub const fn div_floor(self, rhs: Self) -> Self;\r\n    pub const fn div_ceil(self, rhs: Self) -> Self;\r\n    pub const fn next_multiple_of(self, rhs: Self) -> Self;\r\n    pub const fn checked_next_multiple_of(self, rhs: Self) -> Option<Self>;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #88582\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- None yet.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-09-02T05:24:48",
            ),
            updated_at: Some(
                "2022-03-18T06:04:54",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1054642132,
            fk_issue: 1401981,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* Should these panic or wrap around on overflow in release mode? (https://github.com/rust-lang/rust/issues/88581#issuecomment-1063388353)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-28T20:38:43",
            updated_at: Some(
                "2022-03-16T19:00:03",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/cargo:10383:Unstable --keep-going flag": FullFCP {
        fcp: FCP {
            id: 2180,
            fk_issue: 1557773,
            fk_initiator: 64996,
            fk_initiating_comment: 1041836034,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1041836052,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 64996,
                    login: "alexcrichton",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1557773,
            number: 10383,
            fk_milestone: None,
            fk_user: 1940490,
            fk_assignee: Some(
                43198,
            ),
            open: true,
            is_pull_request: true,
            title: "Unstable --keep-going flag",
            body: "## Summary\r\n\r\nThis PR adds an unstable `--keep-going` flag documented as follows:\r\n\r\n> `cargo build --keep-going` (and similarly for `check`, `test` etc) will build as many crates in the dependency graph as possible, rather than aborting the build at the first one that fails to build.\r\n>\r\n> For example if the current package depends on dependencies `fails` and `works`, one of which fails to build, `cargo check -j1` may or may not build the one that succeeds (depending on which one of the two builds Cargo picked to run first), whereas `cargo check -j1 --keep-going` would definitely run both builds, even if the one run first fails.\r\n>\r\n> The `-Z unstable-options` command-line option must be used in order to use `--keep-going` while it is not yet stable:\r\n>\r\n> ```console\r\n> cargo check --keep-going -Z unstable-options\r\n> ```\r\n\r\n## Prior art\r\n\r\n[Buck](https://buck.build/) and [Bazel](https://bazel.build/) and Make all have this flag (though Bazel calls it `--keep_going` :vomiting_face:) with exactly this behavior.\r\n\r\n## Motivation\r\n\r\nI need this in order to make https://github.com/dtolnay/trybuild not super slow.\r\n\r\nTrybuild wants to run Cargo on a bunch of test cases, each of which is a bin crate. The bad options currently available are:\r\n\r\n- Give each test case its own target dir and run build on them in parallel. This is bad because all the test cases have the same dependencies in common (whatever `dev-dependencies` are declared by the project). If there are 100 test cases, all the dependencies would end up getting built 100 times, which is 100x slower than necessary despite the parallelism.\r\n\r\n- Reuse a single target dir for all the test cases. Two Cargos can't operate in parallel on the same target directory, so this forces the test cases to be built serially. This is much slower than necessary on a many-core system, and compounds all of the overheads in Cargo because the project structure must be reloaded by each invocation.\r\n\r\nThe good option I'd like to switch to is:\r\n\r\n- Run `cargo build --bins --keep-going --message-format=json` to build *all* the test cases in parallel. Use the filepaths in the JSON messages to ascribe diagnostics to which bin they're from.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-12T08:07:44",
            ),
            updated_at: Some(
                "2022-03-22T01:39:57",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-review",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 1041836052,
            fk_issue: 1557773,
            fk_user: 20760818,
            body: "Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Eh2406\n* [x] @alexcrichton\n* [ ] @ehuss\n* [ ] @joshtriplett\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-16T16:16:57",
            updated_at: Some(
                "2022-02-16T16:16:59",
            ),
            repository: "rust-lang/cargo",
        },
    },
    "rust-lang/rust:94530:Implement Copy, Clone, PartialEq and Eq for core::fmt::Alignment": FullFCP {
        fcp: FCP {
            id: 2195,
            fk_issue: 1575673,
            fk_initiator: 1993852,
            fk_initiating_comment: 1059571313,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1059571324,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1575673,
            number: 94530,
            fk_milestone: None,
            fk_user: 51362316,
            fk_assignee: Some(
                162737,
            ),
            open: true,
            is_pull_request: true,
            title: "Implement Copy, Clone, PartialEq and Eq for core::fmt::Alignment",
            body: "Alignment is a fieldless exhaustive enum, so it is already possible to\r\nclone and compare it by matching, but it is inconvenient to do so. For\r\nexample, if one would like to create a struct describing a formatter\r\nconfiguration and provide a clone implementation:\r\n\r\n```rust\r\npub struct Format {\r\n    fill: char,\r\n    width: Option<usize>,\r\n    align: fmt::Alignment,\r\n}\r\n\r\nimpl Clone for Format {\r\n    fn clone(&self) -> Self {\r\n        Format {\r\n            align: match self.align {\r\n                fmt::Alignment::Left => fmt::Alignment::Left,\r\n                fmt::Alignment::Right => fmt::Alignment::Right,\r\n                fmt::Alignment::Center => fmt::Alignment::Center,\r\n            },\r\n            .. *self\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDerive Copy, Clone, PartialEq, and Eq for Alignment for convenience.\r\n\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-02T17:35:18",
            ),
            updated_at: Some(
                "2022-03-16T21:07:25",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1059571324,
            fk_issue: 1575673,
            fk_user: 20760818,
            body: "Team member @yaahc has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-04T22:17:57",
            updated_at: Some(
                "2022-03-16T21:07:25",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:94927:Stabilize `let_chains` in Rust 1.62.0": FullFCP {
        fcp: FCP {
            id: 2210,
            fk_issue: 1586861,
            fk_initiator: 162737,
            fk_initiating_comment: 1067658430,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1067658436,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1586861,
            number: 94927,
            fk_milestone: None,
            fk_user: 17877264,
            fk_assignee: Some(
                1606434,
            ),
            open: true,
            is_pull_request: true,
            title: "Stabilize `let_chains` in Rust 1.62.0",
            body: "# Stabilization proposal\r\n\r\nThis PR proposes the stabilization of `#![feature(let_chains)]` in a future-compatibility way that will allow the **possible** addition of the `EXPR is PAT` syntax.\r\n\r\nTracking issue: #53667\r\nVersion: 1.62 (2022-05-17 => beta, 2022-06-30 => stable).\r\n\r\n## What is stabilized\r\n\r\nThe ability to chain let expressions along side local variable declarations or ordinary conditional expressions. For example:\r\n\r\n```rust\r\npub enum Color {\r\n    Blue,\r\n    Red,\r\n    Violet,\r\n}\r\n\r\npub enum Flower {\r\n    Rose,\r\n    Tulip,\r\n    Violet,\r\n}\r\n\r\npub fn roses_are_red_violets_are_blue_printer(\r\n    (first_flower, first_flower_color): (Flower, Color),\r\n    (second_flower, second_flower_color): (Flower, Color),\r\n    pick_up_lines: &[&str],\r\n) {\r\n    if let Flower::Rose = first_flower\r\n        && let Color::Red = first_flower_color\r\n        && let Flower::Violet = second_flower\r\n        && let Color::Blue = second_flower_color\r\n        && let &[first_pick_up_line, ..] = pick_up_lines\r\n    {\r\n        println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\r\n    }\r\n}\r\n\r\nfn main() {\r\n    roses_are_red_violets_are_blue_printer(\r\n        (Flower::Rose, Color::Red),\r\n        (Flower::Violet, Color::Blue),\r\n        &[\"sugar is sweet and so are you\"],\r\n    );\r\n}\r\n```\r\n\r\n## Motivation\r\n\r\nThe main motivation for this feature is improving readability, ergonomics and reducing paper cuts.\r\n\r\nFor more examples, see the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md).\r\n\r\n## What isn't stabilized\r\n\r\n* Let chains in match guards (`if_let_guard`)\r\n\r\n* Resolution of divergent non-terminal matchers\r\n\r\n* The `EXPR is PAT` syntax\r\n\r\n## History\r\n\r\n* On 2017-12-24, [RFC: if- and while-let-chains](https://github.com/rust-lang/rfcs/pull/2260)\r\n* On 2018-07-12, [eRFC: if- and while-let-chains, take 2](https://github.com/rust-lang/rfcs/pull/2497)\r\n* On 2018-08-24, [Tracking issue for eRFC 2497, \"if- and while-let-chains, take 2](https://github.com/rust-lang/rust/issues/53667)\r\n* On 2019-03-19, [Run branch cleanup after copy prop](https://github.com/rust-lang/rust/pull/59290)\r\n* On 2019-03-26, [Generalize diagnostic for x = y where bool is the expected type](https://github.com/rust-lang/rust/pull/59439)\r\n* On 2019-04-24, [Introduce hir::ExprKind::Use and employ in for loop desugaring](https://github.com/rust-lang/rust/pull/60225)\r\n* On 2019-03-19, [[let_chains, 1/6] Remove hir::ExprKind::If](https://github.com/rust-lang/rust/pull/59288)\r\n* On 2019-05-15, [[let_chains, 2/6] Introduce Let(..) in AST, remove IfLet + WhileLet and parse let chains](https://github.com/rust-lang/rust/pull/60861)\r\n* On 2019-06-20, [[let_chains, 3/6] And then there was only Loop](https://github.com/rust-lang/rust/pull/61988)\r\n* On 2020-11-22, [Reintroduce hir::ExprKind::If](https://github.com/rust-lang/rust/pull/79328)\r\n* On 2020-12-24, [Introduce hir::ExprKind::Let - Take 2](https://github.com/rust-lang/rust/pull/80357)\r\n* On 2021-02-19, [Lower condition of if expression before it's \"then\" block](https://github.com/rust-lang/rust/pull/82308)\r\n* On 2021-09-01, [Fix drop handling for `if let` expressions](https://github.com/rust-lang/rust/pull/88572)\r\n* On 2021-09-04, [Formally implement let chains](https://github.com/rust-lang/rust/pull/88642)\r\n* On 2022-01-19, [Add tests to ensure that let_chains works with if_let_guard](https://github.com/rust-lang/rust/pull/93086)\r\n* On 2022-01-18, [Introduce `enhanced_binary_op` feature](https://github.com/rust-lang/rust/pull/93049)\r\n* On 2022-01-22, [Fix `let_chains` and `if_let_guard` feature flags](https://github.com/rust-lang/rust/pull/93213)\r\n* On 2022-02-25, [Initiate the inner usage of `let_chains`](https://github.com/rust-lang/rust/pull/94376)\r\n* On 2022-01-28, [[WIP] Introduce ast::StmtKind::LetElse to allow the usage of `let_else` with `let_chains`](https://github.com/rust-lang/rust/pull/93437)\r\n* On 2022-02-26, [1 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94396)\r\n* On 2022-02-26, [2 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94400)\r\n* On 2022-02-27, [3 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94420)\r\n* On 2022-02-28, [4 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94445)\r\n* On 2022-02-28, [5 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94448)\r\n* On 2022-02-28, [6 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94465)\r\n* On 2022-03-01, [7 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94476)\r\n* On 2022-03-01, [8 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94484)\r\n* On 2022-03-01, [9 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94498)\r\n* On 2022-03-08, [Warn users about `||` in let chain expressions](https://github.com/rust-lang/rust/pull/94754)\r\n\r\nFrom the first RFC (2017-12-24) to the theoretical future stabilization day (2022-06-30), it can be said that this feature took 4 years, 6 months and 7 days of research, development, discussions, agreements/consensus and headaches to be settled.\r\n\r\n## Divergent non-terminal matchers\r\n\r\nMore specifically, https://github.com/rust-lang/rust/issues/86730.\r\n\r\n```rust\r\nmacro_rules! mac {\r\n    ($e:expr) => {\r\n        if $e {\r\n            true\r\n        } else {\r\n            false\r\n        }\r\n    };\r\n}\r\n\r\nfn main() {\r\n    // OK!\r\n    assert_eq!(mac!(true && let 1 = 1), true);\r\n\r\n    // ERROR! Anything starting with `let` is not considered an expression\r\n    assert_eq!(mac!(let 1 = 1 && true), true);\r\n}\r\n```\r\n\r\nTo the best of my knowledge, such error or divergence is orthogonal, does not prevent stabilization and can be tackled independently in the near future or effectively in the next Rust 2024 edition. If not, then https://github.com/c410-f3r/rust/tree/let-macro-blah contains a set of changes that will consider `let` an expression.\r\n\r\nIt is possible that none of the solutions above satisfies all applicable constraints but I personally don't know of any other plausible answers.\r\n\r\n## Alternative syntax\r\n\r\nTaking into account the usefulness of this feature and the overwhelming desire to use both now and in the past, `let PAT = EXPR` will be utilized for stabilization but it doesn't or shall create any obstacle for a **possible** future addition of `EXPR is PAT`.\r\n\r\nThe introductory snippet would then be written as the following.\r\n\r\n```rust\r\nif first_flower is Flower::Rose \r\n    && first_flower_color is Color::Red\r\n    && second_flower is Flower::Violet\r\n    && second_flower_color is Color::Blue\r\n    && pick_up_lines is &[first_pick_up_line, ..]\r\n{\r\n    println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\r\n}\r\n```\r\n\r\nJust to reinforce, this PR only unblocks a **possible** future road for `EXPR is PAT` and does emphasize what is better or what is worse.\r\n\r\n## Tests\r\n\r\n* [Verifies the drop order of let chains and ensures it won't change in the future in an unpredictable way](https://github.com/rust-lang/rust/blob/master/src/test/ui/mir/mir_let_chains_drop_order.rs)\r\n\r\n* [AST lowering does not wrap let chains in an `DropTemps` expression](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs)\r\n\r\n* [Checks pretty printing output](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.rs)\r\n\r\n* [Verifies uninitialized variables due to MIR modifications](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/chains-without-let.rs)\r\n\r\n* [A collection of statements where `let` expressions are forbidden](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs)\r\n\r\n* [All or at least most of the places where let chains are allowed](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/feature-gate.rs)\r\n\r\n* [Ensures that irrefutable lets are allowed in let chains](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs)\r\n\r\n* [issue-88498.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-88498.rs), [issue-90722.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-90722.rs), [issue-92145.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-92145.rs) and [issue-93150.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-93150.rs) were bugs found by third parties and fixed overtime.\r\n\r\n* [Indexing was triggering a ICE due to a wrongly constructed MIR graph](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/no-double-assigments.rs)\r\n\r\n* [Protects the precedence of `&&` in relation to other things](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs)\r\n\r\n* [`let_chains`, as well as `if_let_guard`, has a valid MIR graph that evaluates conditional expressions correctly](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs)\r\n\r\nMost of the infra-structure used by let chains is also used by `if` expressions in stable compiler versions since https://github.com/rust-lang/rust/pull/80357 and https://github.com/rust-lang/rust/pull/88572. As a result, no bugs were found since the integration of https://github.com/rust-lang/rust/pull/88642.\r\n\r\n## Possible future work\r\n\r\n* Let chains in match guards is implemented and working but stabilization is blocked by `if_let_guard`.\r\n\r\n* The usage of `let_chains` with `let_else` is possible but not implemented. Regardless, one attempt was introduced and closed in https://github.com/rust-lang/rust/pull/93437.\r\n\r\nThanks @Centril for creating the RFC and huge thanks (again) to @matthewjasper for all the reviews, mentoring and MIR implementations.\r\n\r\nFixes #53667",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-14T10:35:54",
            ),
            updated_at: Some(
                "2022-03-22T17:13:56",
            ),
            labels: [
                "T-lang",
                "S-waiting-on-review",
                "proposed-final-comment-period",
                "disposition-merge",
                "I-lang-nominated",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1067658436,
            fk_issue: 1586861,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* add-test-to-confirm-no-let-else-in-let-chain (https://github.com/rust-lang/rust/pull/94927#issuecomment-1068267198)\n* doc-pr (https://github.com/rust-lang/rust/pull/94927#issuecomment-1068120114)\n* irrefutable-lint (https://github.com/rust-lang/rust/pull/94927#issuecomment-1067658430)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-15T07:32:46",
            updated_at: Some(
                "2022-03-22T17:13:56",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/cargo:10472:feat: Import cargo-add into cargo": FullFCP {
        fcp: FCP {
            id: 2215,
            fk_issue: 1583979,
            fk_initiator: 14314532,
            fk_initiating_comment: 1069897254,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1069897294,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 60961,
                    login: "epage",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 14314532,
                    login: "weihanglo",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1583979,
            number: 10472,
            fk_milestone: None,
            fk_user: 60961,
            fk_assignee: Some(
                43198,
            ),
            open: true,
            is_pull_request: true,
            title: "feat: Import cargo-add into cargo",
            body: "### Motivation\r\n\r\nThe reasons I'm aware of are:\r\n- Large interest, see #5586 \r\n- Make it easier to add a dependency when you don't care about the version (instead of having to find it or just using the major version if thats all you remember)\r\n- Provide a guided experience, including\r\n  - Catch or prevent errors earlier in the process\r\n  - Bring the Manifest format documentation into the terminal via `cargo add --help`\r\n  - Using `version` and `path` for `dependencies` but `path` only for `dev-dependencies` (see crate-ci/cargo-release#288 which led to killercup/cargo-edit#480)\r\n\r\n### Drawbacks\r\n\r\n1. This is another area of consideration for new RFCs, like rust-lang/rfcs#3143 (this PR supports it) or rust-lang/rfcs#2906 (implementing it will require updating `cargo-add`)\r\n\r\n2. This is a high UX feature that will draw a lot of attention (ie Issue influx)\r\n\r\ne.g.\r\n- killercup/cargo-edit#521\r\n- killercup/cargo-edit#126\r\n- killercup/cargo-edit#217\r\n\r\nWe've tried to reduce the UX influx by focusing the scope to preserving semantic information (custom sort order, comments, etc) but being opinionated on syntax (style of strings, etc)\r\n\r\n### Behavior\r\n\r\nHelp output\r\n<details>\r\n\r\n```console\r\n$ cargo run -- add --help    \r\ncargo-add                           \r\nAdd dependencies to a Cargo.toml manifest file                                                                                                     \r\n                                    \r\nUSAGE:         \r\n    cargo add [OPTIONS] <DEP>[@<VERSION>] [+<FEATURE>,...] ...\r\n    cargo add [OPTIONS] <DEP_PATH> [+<FEATURE>,...] ...\r\n                                                                                                                                                   \r\nARGS:                               \r\n    <DEP_ID>... \r\n            Reference to a package to add as a dependency\r\n                                                                         \r\n            You can reference a packages by:\r\n            - `<name>`, like `cargo add serde` (latest version will be used)\r\n            - `<name>@<version-req>`, like `cargo add serde@1` or `cargo add serde@=1.0.38`\r\n            - `<path>`, like `cargo add ./crates/parser/`\r\n                                                                         \r\n            Additionally, you can specify features for a dependency by following it with a                                                         \r\n            `+<FEATURE>`.     \r\n                                    \r\nOPTIONS:                                                                 \r\n        --no-default-features\r\n            Disable the default features\r\n                                                                         \r\n        --default-features  \r\n            Re-enable the default features           \r\n                                                                         \r\n    -F, --features <FEATURES>\r\n            Space-separated list of features to add                                                                                                \r\n             \r\n            Alternatively, you can specify features for a dependency by following it with a\r\n            `+<FEATURE>`.                                                \r\n\r\n        --optional           \r\n            Mark the dependency as optional                                                                                                        \r\n             \r\n            The package name will be exposed as feature of your crate.\r\n                                                                         \r\n    -v, --verbose\r\n            Use verbose output (-vv very verbose/build.rs output)\r\n\r\n        --no-optional\r\n            Mark the dependency as required\r\n             \r\n            The package will be removed from your features.\r\n\r\n        --color <WHEN>\r\n            Coloring: auto, always, never\r\n\r\n    -r, --rename <NAME>\r\n            Rename the dependency\r\n             \r\n            Example uses:\r\n            - Depending on multiple versions of a crate\r\n            - Depend on crates with the same name from different registries\r\n\r\n        --frozen\r\n            Require Cargo.lock and cache are up to date\r\n\r\n        --registry <NAME>\r\n            Package registry for this dependency\r\n\r\n        --locked\r\n            Require Cargo.lock is up to date\r\n\r\n        --manifest-path <PATH>\r\n            Path to Cargo.toml\r\n\r\n    -p, --package <SPEC>\r\n            Package to modify\r\n\r\n        --config <KEY=VALUE>\r\n            Override a configuration value (unstable)\r\n\r\n        --offline\r\n            Run without accessing the network\r\n\r\n    -q, --quiet                                                                                                                                    \r\n            Do not print cargo log messages                              \r\n\r\n    -Z <FLAG>     \r\n            Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for details                                                                \r\n                                    \r\n        --dry-run                                                        \r\n            Don't actually write the manifest                            \r\n                                    \r\n    -h, --help                                                           \r\n            Print help information  \r\n                                    \r\nSECTION:                                                                 \r\n    -D, --dev\r\n            Add as development dependency                  \r\n                                    \r\n            Dev-dependencies are not used when compiling a package for building, but are used for                                                  \r\n            compiling tests, examples, and benchmarks.\r\n                                    \r\n            These dependencies are not propagated to other packages which depend on this package.                                                  \r\n                                    \r\n    -B, --build\r\n            Add as build dependency\r\n                                                                         \r\n            Build-dependencies are the only dependencies available for use by build scripts\r\n            (`build.rs` files).     \r\n                                    \r\n        --target <TARGET>                                                \r\n            Add as dependency to the given target platform               \r\n\r\nUNSTABLE:                                                                \r\n        --git <URI>                 \r\n            Git repository location\r\n                                                                         \r\n            Without any other information, cargo will use latest commit on the main branch.                                                        \r\n                                    \r\n        --branch <BRANCH>     \r\n            Git branch to download the crate from                        \r\n                                    \r\n        --tag <TAG>          \r\n            Git tag to download the crate from                           \r\n                                    \r\n        --rev <REV>                                                      \r\n            Git reference to download the crate from                     \r\n                 \r\n            This is the catch all, handling hashes to named references in remote repositories.                                                     \r\n\r\nEXAMPLES:\r\n  $ cargo add regex --build\r\n  $ cargo add trycmd --dev\r\n  $ cargo add ./crate/parser/\r\n  $ cargo add serde +derive serde_json\r\n```\r\n\r\n</details>\r\n\r\nExample commands\r\n```rust\r\ncargo add regex\r\ncargo add regex serde\r\ncargo add regex@1\r\ncargo add regex@~1.0\r\ncargo add ../dependency\r\n```\r\nFor an exhaustive set of examples, see [tests](https://github.com/killercup/cargo-edit/blob/merge-add/crates/cargo-add/tests/testsuite/cargo_add.rs) and associated snapshots\r\n\r\nParticular points\r\n- Effectively there are two modes\r\n  - Fill in any relevant field for one package\r\n  - Add multiple packages, erroring for fields that are package-specific (`--git`, `--rename`, `--features`, etc)\r\n- We infer if the `dependencies` table is sorted and preserve that sorting when adding a new dependency\r\n- Adding a workspace dependency\r\n  - dev-dependencies always use path\r\n  - all other dependencies use version + path\r\n- Behavior is idempotent, allowing you to run `cargo add serde +derive serde_json` safely if you already had a dependency on `serde` but without `serde_json`\r\n- When a registry dependency's version req is unspecified, we'll first reuse the version req from another dependency section in the manifest.  If that doesn't exist, we'll use the latest version in the registry as the version req\r\n\r\nFeature gates: `-Zunstable-options`\r\n- `--git` support\r\n  - Doesn't populate version in manifest\r\n  - Doesn't validate name with what is in repo\r\n  - Unsure whether to have `--tag`, `--rev`, `--branch` or to have an inline syntax like pkgids\r\n  - Unsure whether to have `--git` or to have an inline syntax that is unambiguous so it works in the multi-package case\r\n- Inline-feature addition `cargo add serde +derive serde_json`\r\n  - Intention is to allow documenting dependency groups in a single line\r\n  - Gated because we didn't have more time to collect feedback\r\n\r\n### Additional decisions\r\n\r\nAccepting the proposed `cargo-add` as-is assumes the acceptance of the following:\r\n- Add the `-F` short-hand for `--features` to all relevant cargo commands\r\n- Support `@` in pkgids in other commands where we accept `:`\r\n- Add support for `<name>@<version>` in more commands, like `cargo yank` and `cargo install`\r\n\r\n### Alternatives\r\n\r\n- Use `:` instead of `@` for versions\r\n- Flags like `--features`, `--optional`, `--no-default-features` would be position-sensitive, ie they would only apply to the crate immediate preceding them\r\n  - This removes the dual-mode nature of the command and remove the need for the `+feature` syntax (`cargo add serde -F derive serde_json`)\r\n  - There was concern over the rarity of position-sensitive flags in CLIs for adopting it here\r\n- Support a `--sort` flag to sort the dependencies (existed previously)\r\n  - To keep the scope small, we didn't want general manifest editing capabilities\r\n- `--upgrade <POLICY>` flag to choose constraint (existed previously)\r\n  - The flag was confusing as-is and we feel we should instead encourage people towards `^`\r\n- `--allow-prerelease` so a `cargo add clap` can choose among pre-releases as well\r\n  - We felt the pre-release story is too weak in cargo-generally atm for making it first class in `cargo-add`\r\n\r\n### Prior Art\r\n\r\n- *(Python)* [poetry add](https://python-poetry.org/docs/cli/#add)\r\n  - `git+` is needed for inferring git dependencies, no separate  `--git` flags\r\n  - git branch is specified via a URL fragment, instead of a `--branch`\r\n- *(Javascript)* [yarn add](https://yarnpkg.com/cli/add)\r\n  - `name@data` where data can be version, git (with fragment for branch), etc\r\n  - `-E` / `--exact`, `-T` / `--tilde`, `-C` / `--caret` to control version requirement operator instead of `--upgrade <policy>` (also controlled through `defaultSemverRangePrefix` in config)\r\n  - `--cached` for using the lock file (killercup/cargo-edit#41)\r\n  - In addition to `--dev`, it has `--prefer-dev` which will only add the dependency if it doesn't already exist in `dependencies` as well as `dev-dependencies`\r\n  - `--mode update-lockfile` will ensure the lock file gets updated as well\r\n- *(Javascript)* [pnpm-add](https://pnpm.io/cli/add)\r\n- *(Javascript)* npm doesn't have a native solution\r\n  - Specify version with `@<version>`\r\n  - Also overloads `<name>[@<version>]` with path and repo\r\n    - Supports a git host-specific protocol for shorthand, like `github:user/repo`\r\n    - Uses fragment for git ref, seems to have some kind of special semver syntax for tags?\r\n  - Only supports `--save-exact` / `-E` for operators outside of the default\r\n- *(Go)* [go get](https://go.dev/ref/mod#go-get)\r\n  - Specify version with `@<version>`\r\n  - Remove dependency with `@none`\r\n- *(Haskell)* stack doesn't seem to have a native solution\r\n- *(Julia)* [pkg Add](https://docs.julialang.org/en/v1/stdlib/Pkg/)\r\n- *(Ruby)* [bundle add](https://bundler.io/v2.2/man/bundle-add.1.html)\r\n  - Uses `--version` / `-v` instead of `--vers` (we use `--vers` because of `--version` / `-V`)\r\n  - `--source` instead of `path` (`path` correlates to manifest field)\r\n  - Uses `--git` / `--branch` like `cargo-add`\r\n- *(Dart)* [pub add](https://dart.dev/tools/pub/cmd/pub-add)\r\n  - Uses `--git-url` instead of `--git`\r\n  - Uses `--git-ref` instead of `--branch`, `--tag`, `--rev`\r\n\r\n### Future Possibilities\r\n\r\n- Update lock file accordingly\r\n- Exploring the idea of a [`--local` flag](https://github.com/killercup/cargo-edit/issues/590)\r\n- Take the MSRV into account when automatically creating version req (https://github.com/killercup/cargo-edit/issues/587)\r\n- Integrate rustsec to report advisories on new dependencies (https://github.com/killercup/cargo-edit/issues/512)\r\n- Integrate with licensing to report license, block add, etc (e.g. https://github.com/killercup/cargo-edit/issues/386)\r\n- Pull version from lock file (https://github.com/killercup/cargo-edit/issues/41)\r\n- Exploring if any vendoring integration would be beneficial (currently errors)\r\n- Upstream `cargo-rm`, `cargo-upgrade`, and `cargo-set-version` (in that order of priority)\r\n- Update crates.io with `cargo add` snippets in addition to or replacing the manifest snippets\r\n\r\nFor more, see https://github.com/killercup/cargo-edit/issues?q=is%3Aissue+is%3Aopen+label%3Acargo-add\r\n\r\n### How should we test and review this PR?\r\n\r\nThis is intentionally broken up into several commits to help reviewing\r\n1. Import of production code from cargo-edit's `merge-add` branch, with only changes made to let it compile (e.g. fixing up of `use` statements).\r\n2. Import of test code / snapshots.  The only changes outside of the import were to add the `snapbox` dev-dependency and to `mod cargo_add` into the testsuite\r\n3. This extends the work in #10425 so I could add back in the color highlighting I had to remove as part of switching `cargo-add` from direct termcolor calls to calling into `Shell`\r\n\r\nStructure-wise, this is similar to other commands\r\n- `bin` only defines a CLI and adapts it to an `AddOptions`\r\n- `ops` contains a focused API with everything buried under it\r\n\r\nThe \"op\" contains a directory, instead of just a file, because of the amount of content.  Currently, all editing code is contained in there.  Most of this will be broken out and reused when other `cargo-edit` commands are added but holding off on that for now to separate out the editing API discussions from just getting the command in.\r\n\r\nWithin the github UI, I'd recommend looking at individual commits (and the `merge-add` branch if interested), skipping commit 2.  Commit 2 would be easier to browse locally.\r\n\r\n`cargo-add` is mostly covered by end-to-end tests written using `snapbox`, including error cases.  \r\n\r\nThere is additional cleanup that would ideally happen that was excluded intentionally from this PR to keep it better scoped, including\r\n- Consolidating environment variables for end-to-end tests of `cargo`\r\n- Pulling out the editing API, as previously mentioned\r\n  - Where the editing API should live (`cargo::edit`?)\r\n  - Any more specific naming of types to reduce clashes (e.g. `Dependency` or `Manifest` being fairly generic).\r\n- Possibly sharing `SourceId` creation between `cargo install` and `cargo edit`\r\n- Explore using `snapbox` in more of cargo's tests\r\n\r\nImplementation justifications:\r\n- `dunce` and `pathdiff` dependencies: needed for taking paths relative to the user and make them relative to the manifest being edited\r\n- `indexmap` dependency (already a transitive dependency): Useful for preserving uniqueness while preserving order, like with feature values\r\n- `snapbox` dev-dependency: Originally it was used to make it easy to update tests as the UX changed in prep for merging but it had the added benefit of making some UX bugs easier to notice so they got fixed.  Overall, I'd like to see it become the cargo-agnostic version of `cargo-test-support` so there is a larger impact when improvements are made\r\n- `parse_feature` function: `CliFeatures` forces items through a `BTreeSet`, losing the users specified order which we wanted to preserve.\r\n\r\n### Additional Information\r\n\r\nSee also [the internals thread](https://internals.rust-lang.org/t/feedback-on-cargo-add-before-its-merged/16024).\r\n\r\nFixes #5586 ",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-03-10T20:05:26",
            ),
            updated_at: Some(
                "2022-03-18T11:22:33",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-review",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 1069897294,
            fk_issue: 1583979,
            fk_user: 20760818,
            body: "Team member @weihanglo has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Eh2406\n* [ ] @ehuss\n* [ ] @epage\n* [x] @joshtriplett\n* [x] @weihanglo\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-17T02:25:15",
            updated_at: Some(
                "2022-03-18T11:22:32",
            ),
            repository: "rust-lang/cargo",
        },
    },
    "rust-lang/rust:41263:Tracking issue for `ToOwned::clone_into` (`toowned_clone_into`)": FullFCP {
        fcp: FCP {
            id: 2192,
            fk_issue: 30499,
            fk_initiator: 783247,
            fk_initiating_comment: 1057368222,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1057368239,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 30499,
            number: 41263,
            fk_milestone: None,
            fk_user: 18526288,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking issue for `ToOwned::clone_into` (`toowned_clone_into`)",
            body: "Feature added in PR https://github.com/rust-lang/rust/pull/41009\r\n\r\nQuestions raised in the PR:\r\n\r\n- [ ] The directionality is weird. In clone_from and assignment, the data moves right-to-left, but this moves it left-to-right. And that means that autoref doesn't work well, usually forcing you to write &mut.\r\n\r\n- [ ] But fixing that would mean putting it somewhere else, since the Self in ToOwned is the wrong type for what this needs to be. And moving it while still being overridable and providing a default is hard.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2017-04-13T00:10:07",
            ),
            updated_at: Some(
                "2022-03-09T18:04:40",
            ),
            labels: [
                "T-libs-api",
                "B-unstable",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "Libs-Tracked",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1057368239,
            fk_issue: 30499,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-02T20:55:07",
            updated_at: Some(
                "2022-03-09T18:04:40",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/cargo:9925:Adds backoff mechanism for retry": FullFCP {
        fcp: FCP {
            id: 2046,
            fk_issue: 1417900,
            fk_initiator: 64996,
            fk_initiating_comment: 934891723,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 934891739,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 64996,
                    login: "alexcrichton",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1417900,
            number: 9925,
            fk_milestone: None,
            fk_user: 44697459,
            fk_assignee: Some(
                3709504,
            ),
            open: true,
            is_pull_request: true,
            title: "Adds backoff mechanism for retry",
            body: "Addresses #9882 \r\n\r\nAdds an exponential backoff mechanism for network retries.\r\n\r\nAdds 2 additional `net` configuration:\r\n- `retry-max-time`: Upper bound for exponential backoff time\r\n- `retry-delay`: If present, override exponential backoff time with constant delay time (in second)\r\n\r\n---\r\n\r\nWould like to have some opinion on the PR first, before continuing.\r\nAlso, I'm not sure how to do time/duration-based testing in Rust, so I'm not sure how to devise a test for this.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-09-20T10:46:25",
            ),
            updated_at: Some(
                "2022-02-24T21:25:06",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-author",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 934891739,
            fk_issue: 1417900,
            fk_user: 20760818,
            body: "Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Eh2406\n* [x] @alexcrichton\n* [ ] @ehuss\n* [ ] @joshtriplett\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-10-05T21:45:57",
            updated_at: Some(
                "2021-10-05T22:12:37",
            ),
            repository: "rust-lang/cargo",
        },
    },
    "rust-lang/cargo:10344:Auto-switch to multi-sources vendor directory layout": FullFCP {
        fcp: FCP {
            id: 2172,
            fk_issue: 1539703,
            fk_initiator: 64996,
            fk_initiating_comment: 1035052340,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1035052370,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 43198,
                    login: "ehuss",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 64996,
                    login: "alexcrichton",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 3709504,
                    login: "Eh2406",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1539703,
            number: 10344,
            fk_milestone: None,
            fk_user: 14314532,
            fk_assignee: Some(
                64996,
            ),
            open: true,
            is_pull_request: true,
            title: "Auto-switch to multi-sources vendor directory layout",
            body: "<!-- homu-ignore:start -->\r\n### What does this PR try to resolve?\r\n\r\n`cargo-vendor` has been broken for a while, there is no a clear alternative way to solve the situation described in #10310. This PR tries to do what `--no-merge-sources` does but automatically switching to multi-sources layout instead of introducing the flag. (see https://github.com/rust-lang/cargo/pull/10344#pullrequestreview-868113795 and https://github.com/rust-lang/cargo/pull/10344#issuecomment-1032994506)\r\n\r\nFixes #10310\r\n\r\n### How should we test and review this PR?\r\n\r\nPart of the logic is copied from https://github.com/alexcrichton/cargo-vendor.\r\n\r\nSeveral tests are updated and added:\r\n\r\n- 🆕 `vendor::duplicate_version_from_multiple_sources`: Auto-switch between non-merged and merged sources.\r\n- ❌ `vendor::git_duplicate`: Removed. cargo-vendor now can auto-switch.\r\n- ❌ `vendor::vendor_sample_config`: Merged into `vendor::vendor_simple`.\r\n\r\n### Additional information\r\n\r\nThere are somethings I am uncertain:\r\n\r\n- [x] When switching between non-merged and merged sources. `cargo-vendor` removes the entire vendor directory. Should cargo emit a warning or just error out and tell user the incompatibility between merged and non-merged? Generally removing the vendor dir should not be a destructive operation but thing not always goes as we thought 😆 \r\n**Solved**: See https://github.com/rust-lang/cargo/pull/10344#discussion_r795852617\r\n- [x] The `cargo::util::short_hash` is not compatible with [the one in cargo-vendor]. I personally prefer to use `util::short_hash` instead, but if the compatibility is more important I am also ok to copy it over.\r\n**Solved**: See https://github.com/rust-lang/cargo/pull/10344#discussion_r796996824\r\n\r\n[the one in cargo-vendor]: https://github.com/alexcrichton/cargo-vendor/blob/07570e23/src/main.rs#L568-L575\r\n\r\n<!-- homu-ignore:end -->\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-31T04:31:17",
            ),
            updated_at: Some(
                "2022-03-10T15:45:37",
            ),
            labels: [
                "T-cargo",
                "proposed-final-comment-period",
                "disposition-merge",
                "S-waiting-on-author",
            ],
            repository: "rust-lang/cargo",
        },
        status_comment: StatusComment {
            id: 1035052370,
            fk_issue: 1539703,
            fk_user: 20760818,
            body: "Team member @alexcrichton has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Eh2406\n* [x] @alexcrichton\n* [x] @ehuss\n* [ ] @joshtriplett\n\nConcerns:\n\n* directory-source (https://github.com/rust-lang/cargo/pull/10344#issuecomment-1035305157)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-10T15:26:37",
            updated_at: Some(
                "2022-02-25T18:39:32",
            ),
            repository: "rust-lang/cargo",
        },
    },
    "rust-lang/rust:93044:Add forwarding impls for Read, Write, Seek to Arc, Rc": FullFCP {
        fcp: FCP {
            id: 2200,
            fk_issue: 1526589,
            fk_initiator: 783247,
            fk_initiating_comment: 1062941258,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1062941276,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1526589,
            number: 93044,
            fk_milestone: None,
            fk_user: 105766,
            fk_assignee: Some(
                783247,
            ),
            open: true,
            is_pull_request: true,
            title: "Add forwarding impls for Read, Write, Seek to Arc, Rc",
            body: "This adds forwarding impls for `std::io::Read`, `std::io::Write`, and `std::io::Seek` to `alloc:sync::Arc` and `alloc::rc::Rc`. This is relevant for types such as `std::fs::File`, `std::net::TcpStream`, and `std::os::unix::UnixStream` which [implement `Read`, `Write`, and `Seek` for `&T`](https://doc.rust-lang.org/stable/std/io/trait.Read.html#impl-Read-12).\r\n\r\nIt is currently possible to do this manually through wrappers (See the \"Implement a forwarding wrapper by hand\" section for an example), but providing forwarding impls makes this pattern nicer to use. In some cases this can also be done with an extra reference, as shown below:\r\n\r\n```rust\r\nlet stream = TcpStream::connect(\"localhost:8080\");\r\nlet stream = Arc::new(stream);\r\n\r\n&stream1.write(b\"hello world\")?; // OK: Read is available for &Arc<TcpStream>.\r\nstream1.write(b\"hello world\")?;  // Error: Read is not available for Arc<TcpStream>.\r\n                                 // (Enabled by this PR)\r\n```\r\n\r\nThe reason why we want `Arc<T>: Read where &T: Read` is because this enables `Arc<T>` to be passed directly into APIs which expect `T: Read`:\r\n\r\n```rust\r\nfn operate<R: Read>(reader: R) {}\r\n\r\nlet stream = TcpStream::connect(\"localhost:8080\");\r\nlet stream = Arc::new(stream);\r\noperate(stream);  // Error: `Arc<TcpStream>` does not implement `Read`\r\n                  // (Enabled by this PR)\r\n```\r\n\r\n## Implement a forwarding wrapper by hand\r\n\r\nThese trait impls do not allow anything which wasn't allowed before. Dereferencing to the inner type to get `Arc<T>: Read` to work is already possible by creating an intermediate type, as shown here:\r\n\r\n```rust\r\n/// A variant of `Arc` that delegates IO traits if available on `&T`.\r\n#[derive(Debug)]\r\npub struct IoArc<T>(Arc<T>);\r\n\r\nimpl<T> IoArc<T> {\r\n    /// Create a new instance of IoArc.\r\n    pub fn new(data: T) -> Self {\r\n        Self(Arc::new(data))\r\n    }\r\n}\r\n\r\nimpl<T> Read for IoArc<T>\r\nwhere\r\n    for<'a> &'a T: Read,\r\n{\r\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\r\n        (&mut &*self.0).read(buf)\r\n    }\r\n}\r\n\r\nimpl<T> Write for IoArc<T>\r\nwhere\r\n    for<'a> &'a T: Write,\r\n{\r\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\r\n        (&mut &*self.0).write(buf)\r\n    }\r\n\r\n    fn flush(&mut self) -> io::Result<()> {\r\n        (&mut &*self.0).flush()\r\n    }\r\n}\r\n\r\n// forward `Clone`, `Seek` as well here\r\n```\r\n\r\n## References\r\n\r\n- [IO trait delegation for `Arc` blog post](https://blog.yoshuawuyts.com/io-trait-delegation-for-arc/)\r\n- [`async-dup` crate](https://docs.rs/async-dup/latest/async_dup/)\r\n- [`io-arc` crate](https://docs.rs/io-arc/latest/io_arc/)\r\n\r\nJoint work with @yoshuawuyts. ",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-18T18:28:24",
            ),
            updated_at: Some(
                "2022-03-09T20:30:56",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "S-waiting-on-fcp",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1062941276,
            fk_issue: 1526589,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [x] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nConcerns:\n\n* behavior on impls that mutate the reference (https://github.com/rust-lang/rust/pull/93044#issuecomment-1063283366)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-09T13:50:59",
            updated_at: Some(
                "2022-03-09T19:31:27",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/reference:1152:Specify guarantees for repr(rust) structs": FullFCP {
        fcp: FCP {
            id: 2224,
            fk_issue: 1540023,
            fk_initiator: 162737,
            fk_initiating_comment: 1075444253,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1075453670,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1540023,
            number: 1152,
            fk_milestone: None,
            fk_user: 928074,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "Specify guarantees for repr(rust) structs",
            body: "Closes: #1151",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-31T13:06:24",
            ),
            updated_at: Some(
                "2022-03-22T19:01:34",
            ),
            labels: [
                "I-lang-nominated",
                "T-lang",
            ],
            repository: "rust-lang/reference",
        },
        status_comment: StatusComment {
            id: 1075453670,
            fk_issue: 1540023,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @cramertj\n* [x] @joshtriplett\n* [ ] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-22T18:00:29",
            updated_at: Some(
                "2022-03-22T18:00:32",
            ),
            repository: "rust-lang/reference",
        },
    },
    "rust-lang/rust:20561:Tracking issue for Consistent no-prelude attribute (RFC 501)": FullFCP {
        fcp: FCP {
            id: 2194,
            fk_issue: 8163,
            fk_initiator: 173127,
            fk_initiating_comment: 1059258728,
            disposition: Some(
                "close",
            ),
            fk_bot_tracking_comment: 1059258740,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 77424,
                    login: "eddyb",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 332036,
                    login: "oli-obk",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 679122,
                    login: "nagisa",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 831192,
                    login: "wesleywiser",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1295100,
                    login: "davidtwco",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1408859,
                    login: "Aaron1011",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1606434,
                    login: "estebank",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1822483,
                    login: "cjgillot",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1825894,
                    login: "michaelwoerister",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5751617,
                    login: "petrochenkov",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 20113453,
                    login: "matthewjasper",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 29864074,
                    login: "lcnr",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 8163,
            number: 20561,
            fk_milestone: None,
            fk_user: 709807,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking issue for Consistent no-prelude attribute (RFC 501)",
            body: "https://github.com/rust-lang/rfcs/pull/501\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2015-01-05T05:56:57",
            ),
            updated_at: Some(
                "2022-03-07T06:48:35",
            ),
            labels: [
                "B-RFC-approved",
                "T-compiler",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-close",
                "S-tracking-design-concerns",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1059258740,
            fk_issue: 8163,
            fk_user: 20760818,
            body: "Team member @pnkfelix has proposed to close this. The next step is review by the rest of the tagged team members:\n\n* [x] @Aaron1011\n* [ ] @cjgillot\n* [x] @davidtwco\n* [x] @eddyb\n* [ ] @estebank\n* [x] @lcnr\n* [x] @matthewjasper\n* [ ] @michaelwoerister\n* [ ] @nagisa\n* [ ] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [x] @pnkfelix\n* [x] @wesleywiser\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-04T15:23:33",
            updated_at: Some(
                "2022-03-07T06:48:35",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rfcs:3161:[RFC2603] Extend `<const>` to include `str` and structural constants.": FullFCP {
        fcp: FCP {
            id: 1959,
            fk_issue: 1382166,
            fk_initiator: 77424,
            fk_initiating_comment: 896587182,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 896587191,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 77424,
                    login: "eddyb",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 332036,
                    login: "oli-obk",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 679122,
                    login: "nagisa",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 831192,
                    login: "wesleywiser",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1295100,
                    login: "davidtwco",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1408859,
                    login: "Aaron1011",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1606434,
                    login: "estebank",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1825894,
                    login: "michaelwoerister",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5751617,
                    login: "petrochenkov",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 20113453,
                    login: "matthewjasper",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 29864074,
                    login: "lcnr",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1382166,
            number: 3161,
            fk_milestone: None,
            fk_user: 77424,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "[RFC2603] Extend `<const>` to include `str` and structural constants.",
            body: "I'm not sure what the process for amending RFCs is, but here goes nothing:\r\n\r\nThis is one of the last pieces of the `v0` mangling, namely arbitrary constant values (for the full `const` generics feature). This has been tracked by https://github.com/rust-lang/rust/issues/61486, and there's some discussion there.\r\n\r\nThe main takeaway is that the mangling is *structural* (ADT-like tree with integer-like leaves), matching the structural equality that type-level constants are *required* to follow, for soundness reasons.\r\n\r\nAccompanying implementation PRs:\r\n* mangling: https://github.com/rust-lang/rust/pull/87194\r\n* demangling: https://github.com/alexcrichton/rustc-demangle/pull/55\r\n\r\nThe summary of the added forms is:\r\n* `e`: `str`, followed by bytes encoded as two hex nibbles per byte\r\n* `R`/`Q`: `&`/`&mut`, followed by the pointee value\r\n* `A...E`: `[...]`, containing any number of element values\r\n* `T...E`: `(...)`, containing any number of field values\r\n* `V`: named variant/`struct`, followed by the constructor path and one of:\r\n  * `U`: unit variant/`struct` (e.g. `None`)\r\n  * `T...E`: tuple variant/`struct` (e.g. `Some(...)`), containing any number of field values\r\n  * `S...E`: struct-like variant/`struct` (e.g. `Foo { ... }`), containing any number of (disambiguated-)identifier-prefixed (i.e. named) field values\r\n\r\n<hr/>\r\n\r\nEven if there may be constants in the future not covered by these forms, we can rely on the nominal `V` form to encode all sorts of pseudo-paths (while waiting for demanglers to support dedicated manglings), such as these *hypothetical* examples:\r\n* `const::<SomeType>::h54723863eb99e89f` (hashed constant, masquerading as unit `struct`)\r\n* `core::mem::transmute::<usize, *mut T>(1)` (function call, masquerading as tuple `struct`)\r\n\r\n<hr/>\r\n\r\ncc @michaelwoerister",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-08-10T18:33:26",
            ),
            updated_at: Some(
                "2022-03-02T08:37:11",
            ),
            labels: [
                "T-compiler",
                "proposed-final-comment-period",
                "disposition-merge",
            ],
            repository: "rust-lang/rfcs",
        },
        status_comment: StatusComment {
            id: 896587191,
            fk_issue: 1382166,
            fk_user: 20760818,
            body: "Team member @eddyb has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Aaron1011\n* [x] @davidtwco\n* [x] @eddyb\n* [x] @estebank\n* [x] @lcnr\n* [x] @matthewjasper\n* [x] @michaelwoerister\n* [x] @nagisa\n* [x] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [ ] @pnkfelix\n* [x] @wesleywiser\n\nConcerns:\n\n* field names are unnecessary (https://github.com/rust-lang/rfcs/pull/3161#issuecomment-896965971)\n* unit structs are unnecessary (https://github.com/rust-lang/rfcs/pull/3161#issuecomment-896965971)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-08-11T07:56:26",
            updated_at: Some(
                "2021-09-17T13:49:08",
            ),
            repository: "rust-lang/rfcs",
        },
    },
    "rust-lang/rfcs:3216:Allow using `for<'a>` syntax when declaring closures": FullFCP {
        fcp: FCP {
            id: 2201,
            fk_issue: 1515212,
            fk_initiator: 155238,
            fk_initiating_comment: 1064213230,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1064213248,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1515212,
            number: 3216,
            fk_milestone: None,
            fk_user: 1408859,
            fk_assignee: None,
            open: true,
            is_pull_request: true,
            title: "Allow using `for<'a>` syntax when declaring closures",
            body: "[Rendered](https://github.com/Aaron1011/rfcs/blob/higher-ranked-closure/text/0000-closure-lifetime-binder.md)\r\n\r\nAllow declaring closures using the `for<'a>` syntax:\r\n\r\n```rust\r\nlet closure = for<'a> |val: &'a u8| println!(\"Val: {:?}\", val);\r\nclosure(&25);\r\n```\r\n\r\nThis guarantees that the closure will use a higher-ranked lifetime, regardless of how the closure is used in the rest of the function.\r\n\r\nThis went through a pre-RFC at https://internals.rust-lang.org/t/pre-rfc-allow-for-a-syntax-with-closures-for-explicit-higher-ranked-lifetimes/15888. Thank you to everyone who provided feedback!",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-06T21:27:47",
            ),
            updated_at: Some(
                "2022-03-22T17:12:19",
            ),
            labels: [
                "T-lang",
                "proposed-final-comment-period",
                "disposition-merge",
                "I-lang-nominated",
            ],
            repository: "rust-lang/rfcs",
        },
        status_comment: StatusComment {
            id: 1064213248,
            fk_issue: 1515212,
            fk_user: 20760818,
            body: "Team member @nikomatsakis has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [x] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* add-third-alternative (https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064214419)\n* grammatical-ambiguities (https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064215076)\n* ~~ultimate-syntax~~ resolved by https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1068270337\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-10T15:56:15",
            updated_at: Some(
                "2022-03-22T17:11:16",
            ),
            repository: "rust-lang/rfcs",
        },
    },
    "rust-lang/rust:89780:Tracking Issue for poll.ready()?": FullFCP {
        fcp: FCP {
            id: 2193,
            fk_issue: 1436141,
            fk_initiator: 162737,
            fk_initiating_comment: 1057495148,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1057495167,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1436141,
            number: 89780,
            fk_milestone: None,
            fk_user: 1940490,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for poll.ready()?",
            body: "Feature gate: `#![feature(poll_ready)]`\r\n\r\nThis is a tracking issue for the `core::task::Poll::ready` method, which combined with `?` potentially supplants the `ready!` macro of #70922.\r\n\r\n```diff\r\n- let val = ready!(fut.poll(cx));\r\n+ let val = fut.poll(cx).ready()?;\r\n```\r\n\r\n### Public API\r\n\r\n```rust\r\n// core::task\r\n\r\nimpl<T> Poll<T> {\r\n    pub fn ready(self) -> Ready<T>;\r\n}\r\n\r\npub struct Ready<T> {...}\r\n\r\nimpl<T> Try for Ready<T> {\r\n    type Output = T;\r\n    type Residual = Ready<Infallible>;\r\n    ...\r\n}\r\n\r\nimpl<T> FromResidual for Ready<T> {...}\r\n\r\nimpl<T> FromResidual<Ready<Infallible>> for Poll<T> {...}\r\n\r\nimpl<T> Debug for Ready<T> {...}\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #89651\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- ?",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-10-11T19:15:35",
            ),
            updated_at: Some(
                "2022-03-22T19:52:49",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "A-async-await",
                "AsyncAwait-Triaged",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1057495167,
            fk_issue: 1436141,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [ ] @yaahc\n\nConcerns:\n\n* try impl contradicts existing try impls (https://github.com/rust-lang/rust/issues/89780#issuecomment-1075570747)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-02T23:31:12",
            updated_at: Some(
                "2022-03-22T19:49:49",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:92980:Tracking Issue for const offset_from (const_ptr_offset_from)": FullFCP {
        fcp: FCP {
            id: 2204,
            fk_issue: 1524479,
            fk_initiator: 18526288,
            fk_initiating_comment: 1065659256,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065659273,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 155238,
                    login: "nikomatsakis",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 173127,
                    login: "pnkfelix",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 5963049,
                    login: "cramertj",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 18526288,
                    login: "scottmcm",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1524479,
            number: 92980,
            fk_milestone: None,
            fk_user: 330628,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for const offset_from (const_ptr_offset_from)",
            body: "The feature gate for the issue is `#![feature(const_ptr_offset_from)]`.\r\n\r\nThis tracks `const`ness of the following function(s):\r\n```rust\r\nimpl<T> *const T {\r\n  const unsafe fn offset_from(self, origin: *const T) -> isize\r\n}\r\n```\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implementation\r\n- Stabilization report: https://github.com/rust-lang/rust/issues/92980#issuecomment-1065644848\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\n- Should we allow calling this function in case both pointers point to the same allocation (in terms of their provenance) but are not both in-bounds? Cc https://github.com/rust-lang/rust/issues/92512 <br>    → this can be resolved post-stabilization since it is backwards compatible\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n- see https://github.com/rust-lang/rust/issues/41079\r\n- https://github.com/rust-lang/rust/pull/94827",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-16T19:22:52",
            ),
            updated_at: Some(
                "2022-03-22T17:13:42",
            ),
            labels: [
                "T-lang",
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065659273,
            fk_issue: 1524479,
            fk_user: 20760818,
            body: "Team member @scottmcm has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @cramertj\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [ ] @nikomatsakis\n* [ ] @pnkfelix\n* [x] @scottmcm\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-11T23:46:56",
            updated_at: Some(
                "2022-03-22T17:13:42",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/stdarch:1285:Add the rdm target feature to the sqrdmlsh intrinsic.": FullFCP {
        fcp: FCP {
            id: 2187,
            fk_issue: 1573465,
            fk_initiator: 278509,
            fk_initiating_comment: 1054448088,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1054497120,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1573465,
            number: 1285,
            fk_milestone: None,
            fk_user: 29557119,
            fk_assignee: Some(
                278509,
            ),
            open: true,
            is_pull_request: true,
            title: "Add the rdm target feature to the sqrdmlsh intrinsic.",
            body: "I noticed the `sqrdmlsh` intrinsic was asserting for the wrong instruction and didn't have the rdm target feature.\r\n\r\nThis has removed the stabilization of this intrinsic, I'm not sure what the policy is here as the other rdm intrinsics haven't yet been stabilized.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-02-28T15:17:41",
            ),
            updated_at: Some(
                "2022-03-13T11:21:58",
            ),
            labels: [
                "T-libs-api",
            ],
            repository: "rust-lang/stdarch",
        },
        status_comment: StatusComment {
            id: 1054497120,
            fk_issue: 1573465,
            fk_user: 20760818,
            body: "Team member @Amanieu has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [ ] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-02-28T17:33:48",
            updated_at: Some(
                "2022-02-28T17:33:49",
            ),
            repository: "rust-lang/stdarch",
        },
    },
    "rust-lang/rust:71941:Tracking Issue for `NonNull<[T]>::slice_from_raw_parts`": FullFCP {
        fcp: FCP {
            id: 2205,
            fk_issue: 920007,
            fk_initiator: 783247,
            fk_initiating_comment: 1065939508,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065939514,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 920007,
            number: 71941,
            fk_milestone: None,
            fk_user: 291359,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for `NonNull<[T]>::slice_from_raw_parts`",
            body: "This is a tracking issue for the `NonNull<[T]>::slice_from_raw_parts` method proposed in PR https://github.com/rust-lang/rust/pull/71940.\r\nThe feature gates for the issue are `#![feature(nonnull_slice_from_raw_parts)]`, and `#![feature(const_nonnull_slice_from_raw_parts)]` for using as a `const fn`.\r\n\r\n### API\r\n\r\n```rust\r\nimpl<T> NonNull<[T]> {\r\n  pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self;\r\n}\r\n```\r\n\r\nDocs: https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.slice_from_raw_parts\r\n\r\n### Steps\r\n\r\n- [x] Implementation: https://github.com/rust-lang/rust/pull/71940\r\n- [ ] FCP: https://github.com/rust-lang/rust/issues/71941#issuecomment-1065939514\r\n- [ ] Stabilization PR\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2020-05-06T05:55:51",
            ),
            updated_at: Some(
                "2022-03-16T21:04:47",
            ),
            labels: [
                "T-libs-api",
                "B-unstable",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "A-slice",
                "Libs-Tracked",
                "Libs-Small",
                "A-raw-pointers",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065939514,
            fk_issue: 920007,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-12T18:42:00",
            updated_at: Some(
                "2022-03-16T21:04:47",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:87517:Tracking Issue for RFC 3107: derive_default_enum": FullFCP {
        fcp: FCP {
            id: 2209,
            fk_issue: 1370510,
            fk_initiator: 162737,
            fk_initiating_comment: 1066980299,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1066980319,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1370510,
            number: 87517,
            fk_milestone: None,
            fk_user: 173127,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for RFC 3107: derive_default_enum",
            body: "<!--\r\nNOTE: For library features, please use the \"Library Tracking Issue\" template instead.\r\n\r\nThank you for creating a tracking issue! 📜 Tracking issues are for tracking a\r\nfeature from implementation to stabilisation. Make sure to include the relevant\r\nRFC for the feature if it has one. Otherwise provide a short summary of the\r\nfeature and link any relevant PRs or issues, and remove any sections that are\r\nnot relevant to the feature.\r\n\r\nRemember to add team labels to the tracking issue.\r\nFor a language team feature, this would e.g., be `T-lang`.\r\nSuch a feature should also be labeled with e.g., `F-my_feature`.\r\nThis label is used to associate issues (e.g., bugs and design questions) to the feature.\r\n-->\r\n\r\nThis is a tracking issue for the RFC 3107: \"`#[derive(Default)]` on enums with a `#[default]` attribute\" (rust-lang/rfcs#3107).\r\nThe feature gate for the issue is `#![feature(derive_default_enum)]`.\r\n\r\n### About tracking issues\r\n\r\nTracking issues are used to record the overall progress of implementation.\r\nThey are also used as hubs connecting to other relevant issues, e.g., bugs or open design questions.\r\nA tracking issue is however *not* meant for large scale discussion, questions, or bug reports about a feature.\r\nInstead, open a dedicated issue for the specific matter and add the relevant feature gate label.\r\n\r\n### Steps\r\n<!--\r\nInclude each step required to complete the feature. Typically this is a PR\r\nimplementing a feature, followed by a PR that stabilises the feature. However\r\nfor larger features an implementation could be broken up into multiple PRs.\r\n-->\r\n\r\n- [x] Implement the RFC (cc @rust-lang/compiler  -- can anyone write up mentoring\r\n      instructions?)\r\n- [ ] Adjust documentation ([see instructions on rustc-dev-guide][doc-guide])\r\n- [ ] Stabilization PR ([see instructions on rustc-dev-guide][stabilization-guide])\r\n\r\n[stabilization-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\r\n[doc-guide]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#documentation-prs\r\n\r\n### Unresolved Questions\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised.\r\n-->\r\n\r\nNone so far\r\n\r\n### Implementation history\r\n\r\n<!--\r\nInclude a list of all the PRs that were involved in implementing the feature.\r\n-->\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-07-27T16:15:22",
            ),
            updated_at: Some(
                "2022-03-19T11:34:23",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
                "S-tracking-ready-to-stabilize",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1066980319,
            fk_issue: 1370510,
            fk_user: 20760818,
            body: "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [x] @joshtriplett\n* [ ] @m-ou-se\n* [x] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-14T15:50:13",
            updated_at: Some(
                "2022-03-19T11:34:23",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:82223:Tracking Issue for `Result::into_ok_or_err` / `feature(result_into_ok_or_err)`": FullFCP {
        fcp: FCP {
            id: 2207,
            fk_issue: 1215172,
            fk_initiator: 783247,
            fk_initiating_comment: 1065947789,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1065947793,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1215172,
            number: 82223,
            fk_milestone: None,
            fk_user: 860665,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for `Result::into_ok_or_err` / `feature(result_into_ok_or_err)`",
            body: "Feature gate: `#![feature(result_into_ok_or_err)]`\r\n\r\nThis is a tracking issue for `Result::into_ok_or_err`, a method to get the `T` out of `Result<T, T>` regardless of which variant is active.\r\n\r\n### Public API\r\n\r\n```rust\r\nimpl<T> Result<T, T> {\r\n    pub const fn into_ok_or_err(self) -> T;\r\n}\r\n```\r\n\r\n### Steps / History\r\n\r\n- [x] Implementation: #80572\r\n- [ ] Final commenting period (FCP)\r\n- [ ] Stabilization PR\r\n\r\n### Unresolved Questions\r\n\r\n- [ ] ~~What color should the bikeshed be~~ What name should it have?\r\n  Some options that have been suggested:\r\n    - `Result::into_ok_or_err`\r\n    - `Result::ok_or_err`\r\n    - `Result::into_either`\r\n    - `Result::into_inner`\r\n    - `Result::either_value`\r\n    - `Result::unwrap_either`\r\n    - Several more suggested options are listed in the issue.\r\n - [ ] Do we want a reference version as well, as https://github.com/rust-lang/rust/pull/79315 proposed?",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-02-17T17:03:21",
            ),
            updated_at: Some(
                "2022-03-16T21:03:25",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1065947793,
            fk_issue: 1215172,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [ ] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nConcerns:\n\n* rather not (https://github.com/rust-lang/rust/issues/82223#issuecomment-1065985610)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-12T19:24:40",
            updated_at: Some(
                "2022-03-16T21:03:25",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:92939:Tracking Issue for windows_process_extensions_raw_arg": FullFCP {
        fcp: FCP {
            id: 2199,
            fk_issue: 1523566,
            fk_initiator: 783247,
            fk_initiating_comment: 1062923482,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 1062923488,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: false,
            },
        ],
        issue: FCPIssue {
            id: 1523566,
            number: 92939,
            fk_milestone: None,
            fk_user: 6182002,
            fk_assignee: None,
            open: true,
            is_pull_request: false,
            title: "Tracking Issue for windows_process_extensions_raw_arg",
            body: "<!--\r\nThank you for creating a tracking issue!\r\n\r\nTracking issues are for tracking a feature from implementation to stabilization.\r\n\r\nMake sure to include the relevant RFC for the feature if it has one.\r\n\r\nIf the new feature is small, it may be fine to skip the RFC process. In that\r\ncase, you can use use `issue = \"none\"` in your initial implementation PR. The\r\nreviewer will ask you to open a tracking issue if they agree your feature can be\r\nadded without an RFC.\r\n-->\r\n\r\nFeature gate: `#![feature(windows_process_extensions_raw_arg)]`\r\n\r\nThis is a tracking issue for the raw_arg extension to `std::process::Command` on Windows.\r\n\r\nWindows programs on the lowest API layers actually aren't required to accept arguments as an array of strings.\r\nIn fact the illusion that they do accept arguments as an array of strings is mostly maintained by one function. [CommandLineToArgvW](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw). Not all programs use that function to parse arguments. Some of the programs that don't do this are really important, like `cmd.exe`. These programs instead read their argument as one large string, which makes them incompatible with how `std::process::Command::arg` passes the arguments. `std::process::Command::arg` assumes the program will parse the string using `CommandLineToArgvW`. Most of the time this is a reasonable assumption to make.\r\n\r\nSolution: `raw_arg`. Strings passed via `raw_arg` are sent straight through with no alteration, save for inserting spaces inbetween them. Raw args are not quoted, escaped, or really anything complicated like that. This makes them compatible with Windows executable files which don't use [CommandLineToArgvW](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw).\r\n\r\n### Public API\r\n\r\n<!--\r\nFor most library features, it'd be useful to include a summarized version of the public API.\r\n(E.g. just the public function signatures without their doc comments or implementation.)\r\n-->\r\n\r\n```rust\r\nuse std::process::Command;\r\n\r\n// This will print\r\n// \"Hello World!\"\r\n// with the quotes, which is not possible with std::process::Command and `cmd.exe`\r\n// with the current `.arg()` method.\r\nlet cmd = Command::new(\"cmd.exe\").raw_arg(\"/C echo \\\"Hello World!\\\"\");\r\n\r\n// You can also chain this\r\nCommand::new(\"cmd.exe\")\r\n        .raw_arg(\"/C\")\r\n        .raw_arg(\"echo\")\r\n        .raw_arg(\"\\\"Hello World!\\\"\")\r\n```\r\n\r\n### Steps / History\r\n\r\n<!--\r\nFor larger features, more steps might be involved.\r\nIf the feature is changed later, please add those PRs here as well.\r\n-->\r\n\r\n- [x] Implementation: #85832\r\n- [ ] Final comment period (FCP)\r\n- [ ] Stabilization PR #92942\r\n\r\n<!--\r\nOnce the feature has gone through a few release cycles and there are no\r\nunresolved questions left, the feature might be ready for stabilization.\r\n\r\nIf this feature didn't go through the RFC process, a final comment period\r\n(FCP) is always needed before stabilization. This works as follows:\r\n\r\nA library API team member can kick off the stabilization process, at which point\r\nthe rfcbot will ask all the team members to verify they agree with\r\nstabilization. Once enough members agree and there are no concerns, the final\r\ncomment period begins: this issue will be marked as such and will be listed\r\nin the next This Week in Rust newsletter. If no blocking concerns are raised in\r\nthat period of 10 days, a stabilzation PR can be opened by anyone.\r\n-->\r\n\r\n### Unresolved Questions\r\n\r\n<!--\r\nInclude any open questions that need to be answered before the feature can be\r\nstabilised. If multiple (unrelated) big questions come up, it can be a good idea\r\nto open a separate issue for each, to make it easier to keep track of the\r\ndiscussions.\r\n\r\nIt's useful to link any relevant discussions and conclusions (whether on GitHub,\r\nZulip, or the internals forum) here.\r\n-->\r\n\r\n- None yet.\r\n",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2022-01-15T18:35:41",
            ),
            updated_at: Some(
                "2022-03-16T21:06:45",
            ),
            labels: [
                "T-libs-api",
                "proposed-final-comment-period",
                "C-tracking-issue",
                "disposition-merge",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 1062923488,
            fk_issue: 1523566,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [ ] @joshtriplett\n* [x] @m-ou-se\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2022-03-09T13:30:27",
            updated_at: Some(
                "2022-03-16T21:06:45",
            ),
            repository: "rust-lang/rust",
        },
    },
    "rust-lang/rust:89238:deprecate f{32,64}::DIGITS": FullFCP {
        fcp: FCP {
            id: 2030,
            fk_issue: 1422097,
            fk_initiator: 783247,
            fk_initiating_comment: 927177702,
            disposition: Some(
                "merge",
            ),
            fk_bot_tracking_comment: 927177703,
            fcp_start: None,
            fcp_closed: false,
        },
        reviews: [
            Review {
                reviewer: Reviewer {
                    id: 162737,
                    login: "joshtriplett",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 278509,
                    login: "Amanieu",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 456674,
                    login: "BurntSushi",
                },
                approved: false,
            },
            Review {
                reviewer: Reviewer {
                    id: 783247,
                    login: "m-ou-se",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1940490,
                    login: "dtolnay",
                },
                approved: true,
            },
            Review {
                reviewer: Reviewer {
                    id: 1993852,
                    login: "yaahc",
                },
                approved: true,
            },
        ],
        issue: FCPIssue {
            id: 1422097,
            number: 89238,
            fk_milestone: None,
            fk_user: 46493976,
            fk_assignee: Some(
                783247,
            ),
            open: true,
            is_pull_request: true,
            title: "deprecate f{32,64}::DIGITS",
            body: "These constants are misleading: the number of significant digits\r\nvaries for each value that these floating point numbers may encode\r\nbut some programmers are taking them directly as an upper bound.\r\nThis is wrong and is leading to programmers creating applications\r\nthat directly mislead other users about their meaning, having\r\na negative ecosystem-wide impact on mathematical accuracy.\r\n\r\nTo contain the damage, deprecate them without replacement.\r\nIt is hoped this will force programmers to reevaluate their use.\r\n\r\nCloses https://github.com/rust-lang/rust/issues/89106.\r\nThis problem may seem trivial but instructions to alter valid float values being generated by an otherwise highly-regarded source (Clippy) is a bad result. While a PR is open against rust-clippy to fix this behavior, this pattern may have arisen in non-indexed code, even though it seems to be uncommon. As the constants don't seem to be greatly used in practice, while the damage they can do if misused is high, it seems reasonable to take this path.",
            locked: false,
            closed_at: None,
            created_at: Some(
                "2021-09-25T00:09:00",
            ),
            updated_at: Some(
                "2022-02-04T20:05:39",
            ),
            labels: [
                "T-libs-api",
                "S-waiting-on-author",
                "proposed-final-comment-period",
                "disposition-merge",
                "needs-fcp",
                "A-floating-point",
            ],
            repository: "rust-lang/rust",
        },
        status_comment: StatusComment {
            id: 927177703,
            fk_issue: 1422097,
            fk_user: 20760818,
            body: "Team member @m-ou-se has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [x] @yaahc\n\nConcerns:\n\n* detailed explanation (https://github.com/rust-lang/rust/pull/89238#issuecomment-929701400)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
            created_at: "2021-09-25T20:17:22",
            updated_at: Some(
                "2022-01-19T20:35:25",
            ),
            repository: "rust-lang/rust",
        },
    },
}
issue_decorator: IssueDecorator {
    number: 3191,
    title: "New Rust attribute to support embedding debugger visualizers",
    html_url: "https://github.com/rust-lang/rfcs/pull/3191",
    repo_name: "rfcs",
    labels: "T-lang, T-compiler, proposed-final-comment-period, disposition-merge",
    assignees: "",
    updated_at: "about 0 days ago",
}
issue_decorator.html_url: "https://github.com/rust-lang/rfcs/pull/3191"
issue_decorator: IssueDecorator {
    number: 3216,
    title: "Allow using `for<'a>` syntax when declaring closures",
    html_url: "https://github.com/rust-lang/rfcs/pull/3216",
    repo_name: "rfcs",
    labels: "T-lang, proposed-final-comment-period, disposition-merge, I-lang-nominated",
    assignees: "",
    updated_at: "about 0 days ago",
}
issue_decorator.html_url: "https://github.com/rust-lang/rfcs/pull/3216"
issue_decorator: IssueDecorator {
    number: 92980,
    title: "Tracking Issue for const offset_from (const_ptr_offset_from)",
    html_url: "https://github.com/rust-lang/rust/issues/92980",
    repo_name: "rust",
    labels: "T-lang, T-libs-api, proposed-final-comment-period, C-tracking-issue, disposition-merge",
    assignees: "",
    updated_at: "about 0 days ago",
}
issue_decorator.html_url: "https://github.com/rust-lang/rust/issues/92980"
issue_decorator: IssueDecorator {
    number: 93628,
    title: "Stabilize `let else`",
    html_url: "https://github.com/rust-lang/rust/pull/93628",
    repo_name: "rust",
    labels: "T-rustdoc, T-lang, relnotes, S-waiting-on-author, proposed-final-comment-period, disposition-merge, needs-fcp, S-waiting-on-fcp",
    assignees: "jackh726",
    updated_at: "about 0 days ago",
}
issue_decorator.html_url: "https://github.com/rust-lang/rust/pull/93628"
issue_decorator: IssueDecorator {
    number: 94927,
    title: "Stabilize `let_chains` in Rust 1.62.0",
    html_url: "https://github.com/rust-lang/rust/pull/94927",
    repo_name: "rust",
    labels: "T-lang, S-waiting-on-review, proposed-final-comment-period, disposition-merge, I-lang-nominated",
    assignees: "estebank",
    updated_at: "about 0 days ago",
}
issue_decorator.html_url: "https://github.com/rust-lang/rust/pull/94927"
self.name: lang_agenda
context: Context {
    data: {
        "finished_fcp": Array([
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/32838",
                ),
                "labels": String(
                    "B-RFC-approved, T-lang, T-libs-api, B-unstable, C-tracking-issue, disposition-merge, finished-final-comment-period, Libs-Tracked, S-tracking-needs-summary",
                ),
                "number": Number(
                    32838,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Allocator traits and std::heap",
                ),
                "updated_at": String(
                    "2 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "arielb1",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/35121",
                ),
                "labels": String(
                    "A-typesystem, B-RFC-approved, T-lang, T-libs-api, B-unstable, C-tracking-issue, finished-final-comment-period, F-never_type, Libs-Tracked, S-tracking-design-concerns",
                ),
                "number": Number(
                    35121,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Tracking issue for promoting `!` to a type (RFC 1216)",
                ),
                "updated_at": String(
                    "about 4 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/43234",
                ),
                "labels": String(
                    "A-lifetimes, metabug, T-lang, T-compiler, A-NLL, C-tracking-issue, disposition-merge, finished-final-comment-period, S-tracking-impl-incomplete",
                ),
                "number": Number(
                    43234,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "non-lexical lifetimes (NLL) tracking issue",
                ),
                "updated_at": String(
                    "about 44 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/49708",
                ),
                "labels": String(
                    "C-enhancement, T-lang, disposition-merge, finished-final-comment-period",
                ),
                "number": Number(
                    49708,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "`extern type` cannot support `size_of_val` and `align_of_val`",
                ),
                "updated_at": String(
                    "24 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/64926",
                ),
                "labels": String(
                    "A-ffi, T-lang, B-unstable, A-const-fn, S-waiting-on-team, C-tracking-issue, A-const-eval, disposition-merge, finished-final-comment-period, F-const_extern_fn, to-announce",
                ),
                "number": Number(
                    64926,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Tracking issue for `const extern fn` and `const unsafe extern fn`",
                ),
                "updated_at": String(
                    "about 4 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/65516",
                ),
                "labels": String(
                    "T-lang, finished-final-comment-period, disposition-postpone, lang-team-202x-edition",
                ),
                "number": Number(
                    65516,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "[Edition vNext] Consider deprecating weird nesting of items",
                ),
                "updated_at": String(
                    "11 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/66741",
                ),
                "labels": String(
                    "A-allocators, T-lang, T-libs-api, B-unstable, C-tracking-issue, WG-embedded, disposition-merge, finished-final-comment-period",
                ),
                "number": Number(
                    66741,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Tracking issue for `handle_alloc_error` defaulting to panic (for no_std + liballoc)",
                ),
                "updated_at": String(
                    "4 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "matthewjasper",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/86699",
                ),
                "labels": String(
                    "T-lang, S-waiting-on-review, disposition-merge, finished-final-comment-period",
                ),
                "number": Number(
                    86699,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Allow reifying intrinsics to `fn` pointers.",
                ),
                "updated_at": String(
                    "2 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/88140",
                ),
                "labels": String(
                    "T-lang, disposition-merge, finished-final-comment-period",
                ),
                "number": Number(
                    88140,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Stabilize reserved prefixes",
                ),
                "updated_at": String(
                    "6 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "bstrie",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/90957",
                ),
                "labels": String(
                    "B-RFC-approved, T-lang, A-naked, C-tracking-issue, disposition-merge, finished-final-comment-period, F-constrained_naked",
                ),
                "number": Number(
                    90957,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Tracking Issue for RFC #2972: Constrained Naked Functions ",
                ),
                "updated_at": String(
                    "about 5 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "Aaron1011",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/92472",
                ),
                "labels": String(
                    "T-lang, T-libs-api, relnotes, S-waiting-on-review, disposition-merge, finished-final-comment-period",
                ),
                "number": Number(
                    92472,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "proc-macro: Stop wrapping `ident` matchers into groups",
                ),
                "updated_at": String(
                    "about 4 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "jackh726",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/92744",
                ),
                "labels": String(
                    "T-lang, S-waiting-on-team, disposition-merge, finished-final-comment-period, needs-fcp",
                ),
                "number": Number(
                    92744,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Check if enum from foreign crate has any non exhaustive variants when attempting a cast",
                ),
                "updated_at": String(
                    "about 19 days ago",
                ),
            }),
        ]),
        "in_fcp": Array([
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/2956",
                ),
                "labels": String(
                    "T-lang, final-comment-period, disposition-close",
                ),
                "number": Number(
                    2956,
                ),
                "repo_name": String(
                    "rfcs",
                ),
                "title": String(
                    "Add the partial-closure-args RFC.",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "petrochenkov",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/84414",
                ),
                "labels": String(
                    "T-lang, final-comment-period, S-waiting-on-team, disposition-close",
                ),
                "number": Number(
                    84414,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Allow struct and enum to contain inner attrs",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/94081",
                ),
                "labels": String(
                    "T-lang, final-comment-period, S-waiting-on-review, disposition-merge, perf-regression",
                ),
                "number": Number(
                    94081,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Lazy tait take two",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/94775",
                ),
                "labels": String(
                    "T-lang, final-comment-period, S-waiting-on-review, disposition-merge",
                ),
                "number": Number(
                    94775,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Fix constants not getting dropped if part of a diverging expression",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/102",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang",
                ),
                "number": Number(
                    102,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Deprecate target_vendor ",
                ),
                "updated_at": String(
                    "about 20 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/126",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    126,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Positional Associated Types",
                ),
                "updated_at": String(
                    "about 20 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/135",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    135,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Interoperability With C++ Destruction Order",
                ),
                "updated_at": String(
                    "about 20 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/147",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    147,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Add #[deprecated_safe] attribute to allow functions be be marked unsafe in a backwards compatible fashion",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/150",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    150,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Async fns in traits",
                ),
                "updated_at": String(
                    "about 7 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/151",
                ),
                "labels": String(
                    "major-change, final-comment-period, disposition-close, T-lang",
                ),
                "number": Number(
                    151,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "extern macro!(ABI) fn",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
        ]),
        "nominated": Array([
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3216",
                ),
                "labels": String(
                    "T-lang, proposed-final-comment-period, disposition-merge, I-lang-nominated",
                ),
                "number": Number(
                    3216,
                ),
                "repo_name": String(
                    "rfcs",
                ),
                "title": String(
                    "Allow using `for<'a>` syntax when declaring closures",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "wesleywiser",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/93313",
                ),
                "labels": String(
                    "T-lang, S-waiting-on-review, I-lang-nominated",
                ),
                "number": Number(
                    93313,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Check if call return type is visibly uninhabited when building MIR",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "nikomatsakis",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/93582",
                ),
                "labels": String(
                    "T-compiler, S-waiting-on-review, I-lang-nominated",
                ),
                "number": Number(
                    93582,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Allow `impl Fn() -> impl Trait` in return position",
                ),
                "updated_at": String(
                    "about 8 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "estebank",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/94927",
                ),
                "labels": String(
                    "T-lang, S-waiting-on-review, proposed-final-comment-period, disposition-merge, I-lang-nominated",
                ),
                "number": Number(
                    94927,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Stabilize `let_chains` in Rust 1.62.0",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/reference/pull/1152",
                ),
                "labels": String(
                    "I-lang-nominated, T-lang",
                ),
                "number": Number(
                    1152,
                ),
                "repo_name": String(
                    "reference",
                ),
                "title": String(
                    "Specify guarantees for repr(rust) structs",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/reference/pull/1163",
                ),
                "labels": String(
                    "I-lang-nominated, T-lang",
                ),
                "number": Number(
                    1163,
                ),
                "repo_name": String(
                    "reference",
                ),
                "title": String(
                    "Clarify guarantees provided by repr(packed)",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
        ]),
        "p_critical": Array([]),
        "pending_lang_team_prs": Array([]),
        "pending_project_proposals": Array([
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/102",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang",
                ),
                "number": Number(
                    102,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Deprecate target_vendor ",
                ),
                "updated_at": String(
                    "about 20 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/125",
                ),
                "labels": String(
                    "major-change, T-lang, to-announce",
                ),
                "number": Number(
                    125,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Support platforms with size_t != uintptr_t",
                ),
                "updated_at": String(
                    "4 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/126",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    126,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Positional Associated Types",
                ),
                "updated_at": String(
                    "about 20 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/135",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    135,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Interoperability With C++ Destruction Order",
                ),
                "updated_at": String(
                    "about 20 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/139",
                ),
                "labels": String(
                    "major-change, T-lang, to-announce",
                ),
                "number": Number(
                    139,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "inner crates, aka multiple crates per file",
                ),
                "updated_at": String(
                    "about 21 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/143",
                ),
                "labels": String(
                    "major-change, T-lang, to-announce",
                ),
                "number": Number(
                    143,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "allow construction of non-exhaustive structs when using functional update syntax",
                ),
                "updated_at": String(
                    "about 46 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/147",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    147,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Add #[deprecated_safe] attribute to allow functions be be marked unsafe in a backwards compatible fashion",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/148",
                ),
                "labels": String(
                    "major-change, T-lang, to-announce",
                ),
                "number": Number(
                    148,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "TRIAGEBOT TESTING: Please ignore (rename 3)",
                ),
                "updated_at": String(
                    "about 1 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/150",
                ),
                "labels": String(
                    "major-change, final-comment-period, T-lang, to-announce",
                ),
                "number": Number(
                    150,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Async fns in traits",
                ),
                "updated_at": String(
                    "about 7 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/151",
                ),
                "labels": String(
                    "major-change, final-comment-period, disposition-close, T-lang",
                ),
                "number": Number(
                    151,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "extern macro!(ABI) fn",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
        ]),
        "proposed_fcp": Array([
            Object({
                "assignees": String(
                    "",
                ),
                "bot_tracking_comment": String(
                    "1064452047",
                ),
                "bot_tracking_comment_content": String(
                    "",
                ),
                "bot_tracking_comment_html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3191#issuecomment-1064452047",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3191",
                ),
                "initiating_comment": String(
                    "1064452035",
                ),
                "initiating_comment_content": String(
                    "Team member @wesleywiser has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [ ] @Aaron1011\n* [x] @cjgillot\n* [x] @cramertj\n* [x] @davidtwco\n* [x] @eddyb\n* [x] @estebank\n* [x] @joshtriplett\n* [ ] @lcnr\n* [ ] @matthewjasper\n* [x] @michaelwoerister\n* [ ] @nagisa\n* [x] @nikomatsakis\n* [x] @oli-obk\n* [x] @petrochenkov\n* [x] @pnkfelix\n* [x] @scottmcm\n* [x] @wesleywiser\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
                ),
                "initiating_comment_html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3191#issuecomment-1064452035",
                ),
                "labels": String(
                    "T-lang, T-compiler, proposed-final-comment-period, disposition-merge",
                ),
                "number": Number(
                    3191,
                ),
                "repo_name": String(
                    "rfcs",
                ),
                "title": String(
                    "New Rust attribute to support embedding debugger visualizers",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "bot_tracking_comment": String(
                    "1064213248",
                ),
                "bot_tracking_comment_content": String(
                    "",
                ),
                "bot_tracking_comment_html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064213248",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3216",
                ),
                "initiating_comment": String(
                    "1064213230",
                ),
                "initiating_comment_content": String(
                    "Team member @nikomatsakis has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [x] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* add-third-alternative (https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064214419)\n* grammatical-ambiguities (https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064215076)\n* ~~ultimate-syntax~~ resolved by https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1068270337\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
                ),
                "initiating_comment_html_url": String(
                    "https://github.com/rust-lang/rfcs/pull/3216#issuecomment-1064213230",
                ),
                "labels": String(
                    "T-lang, proposed-final-comment-period, disposition-merge, I-lang-nominated",
                ),
                "number": Number(
                    3216,
                ),
                "repo_name": String(
                    "rfcs",
                ),
                "title": String(
                    "Allow using `for<'a>` syntax when declaring closures",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "bot_tracking_comment": String(
                    "1065659273",
                ),
                "bot_tracking_comment_content": String(
                    "",
                ),
                "bot_tracking_comment_html_url": String(
                    "https://github.com/rust-lang/rust/issues/92980#issuecomment-1065659273",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/issues/92980",
                ),
                "initiating_comment": String(
                    "1065659256",
                ),
                "initiating_comment_content": String(
                    "Team member @scottmcm has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @Amanieu\n* [ ] @BurntSushi\n* [x] @cramertj\n* [x] @dtolnay\n* [x] @joshtriplett\n* [x] @m-ou-se\n* [ ] @nikomatsakis\n* [ ] @pnkfelix\n* [x] @scottmcm\n* [ ] @yaahc\n\nNo concerns currently listed.\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
                ),
                "initiating_comment_html_url": String(
                    "https://github.com/rust-lang/rust/issues/92980#issuecomment-1065659256",
                ),
                "labels": String(
                    "T-lang, T-libs-api, proposed-final-comment-period, C-tracking-issue, disposition-merge",
                ),
                "number": Number(
                    92980,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Tracking Issue for const offset_from (const_ptr_offset_from)",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "jackh726",
                ),
                "bot_tracking_comment": String(
                    "1029383585",
                ),
                "bot_tracking_comment_content": String(
                    "",
                ),
                "bot_tracking_comment_html_url": String(
                    "https://github.com/rust-lang/rust/pull/93628#issuecomment-1029383585",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/93628",
                ),
                "initiating_comment": String(
                    "1029383577",
                ),
                "initiating_comment_content": String(
                    "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [x] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* need-consistency-rvalue-temporary-rules-between-let-and-let-else (https://github.com/rust-lang/rust/pull/93628#issuecomment-1055738523)\n* ~~not-while-rustfmt-breaks-on-it~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1032936704\n* ~~semicolon~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1059799661\n* ~~stabilization-report~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1033846359\n* ~~summarize-concerns~~ resolved by https://github.com/rust-lang/rust/pull/93628#issuecomment-1056785904\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
                ),
                "initiating_comment_html_url": String(
                    "https://github.com/rust-lang/rust/pull/93628#issuecomment-1029383577",
                ),
                "labels": String(
                    "T-rustdoc, T-lang, relnotes, S-waiting-on-author, proposed-final-comment-period, disposition-merge, needs-fcp, S-waiting-on-fcp",
                ),
                "number": Number(
                    93628,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Stabilize `let else`",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "estebank",
                ),
                "bot_tracking_comment": String(
                    "1067658436",
                ),
                "bot_tracking_comment_content": String(
                    "",
                ),
                "bot_tracking_comment_html_url": String(
                    "https://github.com/rust-lang/rust/pull/94927#issuecomment-1067658436",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/rust/pull/94927",
                ),
                "initiating_comment": String(
                    "1067658430",
                ),
                "initiating_comment_content": String(
                    "Team member @joshtriplett has proposed to merge this. The next step is review by the rest of the tagged team members:\n\n* [x] @cramertj\n* [x] @joshtriplett\n* [x] @nikomatsakis\n* [ ] @pnkfelix\n* [ ] @scottmcm\n\nConcerns:\n\n* add-test-to-confirm-no-let-else-in-let-chain (https://github.com/rust-lang/rust/pull/94927#issuecomment-1068267198)\n* doc-pr (https://github.com/rust-lang/rust/pull/94927#issuecomment-1068120114)\n* irrefutable-lint (https://github.com/rust-lang/rust/pull/94927#issuecomment-1067658430)\n\nOnce a majority of reviewers approve (and at most 2 approvals are outstanding), this will enter its final comment period. If you spot a major issue that hasn't been raised at any point in this process, please speak up!\n\nSee [this document](https://github.com/rust-lang/rfcbot-rs/blob/master/README.md) for info about what commands tagged team members can give me.",
                ),
                "initiating_comment_html_url": String(
                    "https://github.com/rust-lang/rust/pull/94927#issuecomment-1067658430",
                ),
                "labels": String(
                    "T-lang, S-waiting-on-review, proposed-final-comment-period, disposition-merge, I-lang-nominated",
                ),
                "number": Number(
                    94927,
                ),
                "repo_name": String(
                    "rust",
                ),
                "title": String(
                    "Stabilize `let_chains` in Rust 1.62.0",
                ),
                "updated_at": String(
                    "about 0 days ago",
                ),
            }),
        ]),
        "rfcs_waiting_to_be_merged": Array([]),
        "scheduled_meetings": Array([
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/94",
                ),
                "labels": String(
                    "meeting-proposal, meeting-scheduled, T-lang",
                ),
                "number": Number(
                    94,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Structural equality",
                ),
                "updated_at": String(
                    "4 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/97",
                ),
                "labels": String(
                    "meeting-proposal, meeting-scheduled, T-lang",
                ),
                "number": Number(
                    97,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Never allow unwinding from Drop impls",
                ),
                "updated_at": String(
                    "about 26 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/119",
                ),
                "labels": String(
                    "meeting-proposal, meeting-scheduled, T-lang",
                ),
                "number": Number(
                    119,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Dyn upcasting, safety considerations",
                ),
                "updated_at": String(
                    "4 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/131",
                ),
                "labels": String(
                    "meeting-proposal, meeting-scheduled, T-lang",
                ),
                "number": Number(
                    131,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Const eval overview",
                ),
                "updated_at": String(
                    "3 months ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/132",
                ),
                "labels": String(
                    "meeting-proposal, meeting-scheduled, T-lang",
                ),
                "number": Number(
                    132,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "Lint policy",
                ),
                "updated_at": String(
                    "about 7 days ago",
                ),
            }),
            Object({
                "assignees": String(
                    "",
                ),
                "html_url": String(
                    "https://github.com/rust-lang/lang-team/issues/144",
                ),
                "labels": String(
                    "meeting-proposal, meeting-scheduled, T-lang",
                ),
                "number": Number(
                    144,
                ),
                "repo_name": String(
                    "lang-team",
                ),
                "title": String(
                    "\"RPITIDT\"",
                ),
                "updated_at": String(
                    "about 4 days ago",
                ),
            }),
        ]),
    },
}
[2m2022-03-22T23:59:37.030772Z[0m [34mDEBUG[0m [2mglobset[0m[2m:[0m glob converted to regex: Glob { glob: "templates/*", re: "(?-u)^templates/[^/]*$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true }, tokens: Tokens([Literal('t'), Literal('e'), Literal('m'), Literal('p'), Literal('l'), Literal('a'), Literal('t'), Literal('e'), Literal('s'), Literal('/'), ZeroOrMore]) }    
[2m2022-03-22T23:59:37.030835Z[0m [34mDEBUG[0m [2mglobset[0m[2m:[0m built glob set; 0 literals, 0 basenames, 0 extensions, 0 prefixes, 0 suffixes, 0 required extensions, 1 regexes    
---
title: Triage meeting DATE
tags: triage-meeting
---

# T-lang meeting agenda

* Meeting date: DATE

## Attendance

* Team members:
* Others:

## Meeting roles

* Action item scribe:
* Note-taker:

## Scheduled meetings
-  "Structural equality" [lang-team#94](https://github.com/rust-lang/lang-team/issues/94) 
-  "Never allow unwinding from Drop impls" [lang-team#97](https://github.com/rust-lang/lang-team/issues/97) 
-  "Dyn upcasting, safety considerations" [lang-team#119](https://github.com/rust-lang/lang-team/issues/119) 
-  "Const eval overview" [lang-team#131](https://github.com/rust-lang/lang-team/issues/131) 
-  "Lint policy" [lang-team#132](https://github.com/rust-lang/lang-team/issues/132) 
-  ""RPITIDT"" [lang-team#144](https://github.com/rust-lang/lang-team/issues/144) 

## Announcements or custom items

(Meeting attendees, feel free to add items here!)

## Action item review

* [Action items list](https://hackmd.io/gstfhtXYTHa3Jv-P_2RK7A)

## Pending lang team project proposals
### "Deprecate target_vendor " lang-team#102

**Link:** https://github.com/rust-lang/lang-team/issues/102

### "Support platforms with size_t != uintptr_t" lang-team#125

**Link:** https://github.com/rust-lang/lang-team/issues/125

### "Positional Associated Types" lang-team#126

**Link:** https://github.com/rust-lang/lang-team/issues/126

### "Interoperability With C++ Destruction Order" lang-team#135

**Link:** https://github.com/rust-lang/lang-team/issues/135

### "inner crates, aka multiple crates per file" lang-team#139

**Link:** https://github.com/rust-lang/lang-team/issues/139

### "allow construction of non-exhaustive structs when using functional update syntax" lang-team#143

**Link:** https://github.com/rust-lang/lang-team/issues/143

### "Add #[deprecated_safe] attribute to allow functions be be marked unsafe in a backwards compatible fashion" lang-team#147

**Link:** https://github.com/rust-lang/lang-team/issues/147

### "TRIAGEBOT TESTING: Please ignore (rename 3)" lang-team#148

**Link:** https://github.com/rust-lang/lang-team/issues/148

### "Async fns in traits" lang-team#150

**Link:** https://github.com/rust-lang/lang-team/issues/150

### "extern macro!(ABI) fn" lang-team#151

**Link:** https://github.com/rust-lang/lang-team/issues/151



## PRs on the lang-team repo

None.




## RFCs waiting to be merged

None.




## Proposed FCPs

**Check your boxes!**
### "New Rust attribute to support embedding debugger visualizers" rfcs#3191

**Link:** https://github.com/rust-lang/rfcs/pull/3191

### "Allow using `for<'a>` syntax when declaring closures" rfcs#3216

**Link:** https://github.com/rust-lang/rfcs/pull/3216

### "Tracking Issue for const offset_from (const_ptr_offset_from)" rust#92980

**Link:** https://github.com/rust-lang/rust/issues/92980

### "Stabilize `let else`" rust#93628

**Link:** https://github.com/rust-lang/rust/pull/93628

### "Stabilize `let_chains` in Rust 1.62.0" rust#94927

**Link:** https://github.com/rust-lang/rust/pull/94927



## Active FCPs
### "Add the partial-closure-args RFC." rfcs#2956

**Link:** https://github.com/rust-lang/rfcs/pull/2956

### "Allow struct and enum to contain inner attrs" rust#84414

**Link:** https://github.com/rust-lang/rust/pull/84414

### "Lazy tait take two" rust#94081

**Link:** https://github.com/rust-lang/rust/pull/94081

### "Fix constants not getting dropped if part of a diverging expression" rust#94775

**Link:** https://github.com/rust-lang/rust/pull/94775

### "Deprecate target_vendor " lang-team#102

**Link:** https://github.com/rust-lang/lang-team/issues/102

### "Positional Associated Types" lang-team#126

**Link:** https://github.com/rust-lang/lang-team/issues/126

### "Interoperability With C++ Destruction Order" lang-team#135

**Link:** https://github.com/rust-lang/lang-team/issues/135

### "Add #[deprecated_safe] attribute to allow functions be be marked unsafe in a backwards compatible fashion" lang-team#147

**Link:** https://github.com/rust-lang/lang-team/issues/147

### "Async fns in traits" lang-team#150

**Link:** https://github.com/rust-lang/lang-team/issues/150

### "extern macro!(ABI) fn" lang-team#151

**Link:** https://github.com/rust-lang/lang-team/issues/151



## P-critical issues

None.




## Nominated RFCs, PRs and issues
### "Allow using `for<'a>` syntax when declaring closures" rfcs#3216

**Link:** https://github.com/rust-lang/rfcs/pull/3216

### "Check if call return type is visibly uninhabited when building MIR" rust#93313

**Link:** https://github.com/rust-lang/rust/pull/93313

### "Allow `impl Fn() -> impl Trait` in return position" rust#93582

**Link:** https://github.com/rust-lang/rust/pull/93582

### "Stabilize `let_chains` in Rust 1.62.0" rust#94927

**Link:** https://github.com/rust-lang/rust/pull/94927

### "Specify guarantees for repr(rust) structs" reference#1152

**Link:** https://github.com/rust-lang/reference/pull/1152

### "Clarify guarantees provided by repr(packed)" reference#1163

**Link:** https://github.com/rust-lang/reference/pull/1163


